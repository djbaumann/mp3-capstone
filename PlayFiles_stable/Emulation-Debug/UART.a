
//_____________________________________________________________
//
	.sect code,checkUART	// 527 words
	.export _checkUART
_checkUART:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C0,(I6)+1
	stx I0,(I6) ; sty I1,(I6)+1
	ldc 0,I1	// 0 -> I1
	ldc _vo_stdin,I0	// ET2
	stx I2,(I6)+1
// 	if (ioctl(vo_stdin,4,0) > 0)
	ldx (I0),I2/*V*/	// ET2 ==> 'vo_stdin'
	call _ioctl
	ldc 4,C0	// 4 -> C0
// jumped away
	sub A0,NULL,A0	// ET3 <= (0) -> (0)
	nop
	jle F0B4	// signed compare
	nop
// jumped away
	ldy (I6)+1,NULL ; ldx (I0),A0/*V*/	// I6 += 1
// 	}

	call _vo_fgetc
	stx A0,(I6)	// 'vo_stdin'
// jumped away
	add A0,NULL,A1 ; ldx (I6)-1,NULL	// I6 += -1
// (c == 'h')
	ldc 104,A0	// 104 -> 0 -> ET5
	sub A1,A0,B1	// 'c' != ET5 -> AT9d
	nop
	jzc F0B8	// signed compare
	nop
// jumped away
// 	   }
// 	   {
//  vo_puts("'C' = Toggle capacitive button output to UART");
	ldc ctogg_1,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'>' = Play next song");
	ldc play_2,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'<' = Play previous song");
	ldc play_3,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'+' = Volume up");
	ldc volu_4,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'-' = Volume down");
	ldc volu_5,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'R' = Toggle repeat song mode");
	ldc rtogg_6,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'P' = Toggle Play/Pause");
	ldc ptogg_7,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'i' = Press top left screen button");
	ldc ipres_8,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'k' = Press bottom left screen button");
	ldc kpres_9,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'o' = Press top right screen button");
	ldc opres_10,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'l' = Press bottom right screen button");
	ldc lpres_11,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'s' = Prints various variable statuses");
	ldc sprin_12,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'A' = Toggle which analog pin is read for battery percentage");
	ldc atogg_13,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'h' = Prints this help menu");
	ldc hprin_14,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
//  vo_puts("'0-9' = sets the song index to the chosen number");
	ldc se_15,I2	// I2
	call _vo_puts
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
// 			return 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET24
F0B1:
	ldx (I6)-1,I2
	ldy (I6),I1 ; ldx (I6)-1,I0
	ldy (I6),C0 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F0B8:
// 		if (c == 'Q')
	ldc 81,A0	// 81 -> 0 -> ET25
	sub A1,A0,B1	// 'c' != ET25 -> AT9e
	ldc 98,A0	// 98 -> 0 -> ET2b
	jzc F0B25	// signed compare
	sub A1,A0,B1	// 'c' != ET2b -> ATa1
// jumped away
// 		}
// 		{
// 			audioDecoder->cs.cancel = 1;
	ldc _audioDecoder,I0	// ET28
	ldx (I0),I0/*V*/ ; sub NULL,ONES,A0	// ET28 ==> 'audioDecoder'
	ldx (I0)+7,NULL	// ET29 += 13
	ldx (I0)+6,NULL	// ...
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET26 ==> ET29
// 			running = 0;
	ldc _running,I0	// ET2a
// 			return 1;
	j F0B1
	stx A0,(I0)/*V*/ ; sub NULL,ONES,A0	// ET0 ==> ET2a
// jumped away
F0B25:
// 	   if (c == 'b')
	nop
	jzc F0B27	// signed compare
	nop
// jumped away
// 		}
// 	   {
// 	   		monitorVoltage();
	call _monitorVoltage
	nop
// jumped away
// 	   		return 4;
	j F0B1
	ldc 4,A0	// 4 -> 1 -> ET2c
// jumped away
F0B27:
// 		if (c == 'C')
	ldc 67,A0	// 67 -> 0 -> ET2d
	sub A1,A0,B1	// 'c' != ET2d -> ATa2
	ldc 62,A0	// 62 -> 0 -> ET32
	jzc F0B30	// signed compare
	sub A1,A0,B1	// 'c' != ET32 -> ATa5
// jumped away
// 		}
// 		{
// 			cbut = !cbut;
	ldc _cbut,I0	// ET2f
	ldx (I0),A0/*V*/ ; and NULL,NULL,A1	// ET2f ==> 'cbut'
	sub A0,NULL,A0	// 'cbut' != (0) -> (0)
	ldc 5,A0
	jzc F0B32	// unsigned compare
	nop	// ET2f
// jumped away
	sub NULL,ONES,A1	// 1 -> ET30
F0B32:
// 			return 5;
	j F0B1
	stx A1,(I0)/*V*/	// ET30 ==> ET2f
// jumped away
F0B30:
// 		if (c == '>')
	ldc 60,A0	// 60 -> 0 -> ET36
	jzc F0B34	// signed compare
	sub A1,A0,B1	// 'c' != ET36 -> ATa8
// jumped away
// 		}
// 		{
// 			repeatSongStatus = 0;
	ldc 0,A0	// 0 -> 1 -> ET33
	ldc _repeatSongStatus,I0	// ET34
	stx A0,(I0)/*V*/ ; sub NULL,ONES,A0	// ET33 ==> ET34
// 			audioDecoder->cs.cancel = 1;
	ldc _audioDecoder,I0	// ET28
	ldx (I0),I0/*V*/	// ET28 ==> 'audioDecoder'
	ldx (I0)+7,NULL	// ET29 += 13
	ldx (I0)+6,NULL	// ...
	stx A0,(I0)/*V*/	// ET26 ==> ET29
// 			return 2;
	j F0B1
	ldc 2,A0	// 2 -> 1 -> ET35
// jumped away
F0B34:
// 		if (c == '<')
	ldc 43,A0	// 43 -> 0 -> ET41
	jzc F0B36	// signed compare
	sub A1,A0,B1	// 'c' != ET41 -> ATaa
// jumped away
// 		}
// 		{
// 			repeatSongStatus = 0;
	ldc 0,A0	// 0 -> 1 -> ET33
	ldc _repeatSongStatus,I0	// ET34
	stx A0,(I0)/*V*/ ; sub NULL,ONES,A0	// ET33 ==> ET34
// 			audioDecoder->cs.cancel = 1;
	ldc _audioDecoder,I0	// ET28
	ldx (I0),I0/*V*/ ; and NULL,NULL,A1	// ET28 ==> 'audioDecoder'
	mv A1,A1	// update guard bits (cmp)
	ldx (I0)+7,NULL	// ET29 += 13
	ldx (I0)+6,NULL	// ...
	stx A0,(I0)+1/*V*/	// ET26 ==> ET29
// 			if (audioDecoder->cs.playTimeSeconds < 3)
	ldc 3,A0	// 3 -> 2 -> A0
	ldx (I0)+1,B0/*V*/
	ldx (I0)-1,B1/*V*/
	mv B1,B1	// 0 -> A1
	sub B,A,A	// ET39 >= ET3a -> ATa9
	ldc _fileNum,I0	// ET3c
	jge F0B38	// signed compare
	ldc 2,A0	// 2 -> 0 -> ET3b
// jumped away
// 			}
// 			{
// 				fileNum -= 2;
	ldx (I0),A1/*V*/	// ET3c ==> 'fileNum'
	sub A1,A0,A0	// 'fileNum' - ET3b -> ET3d
F0B39:
	stx A0,(I0)/*V*/	// ET3d ==> ET3c
// 			if (fileNum < -1)
	ldc _fileNum,I0	// ET3c
	ldx (I0),A0/*V*/	// ET3c ==> 'fileNum'
	sub A0,ONES,A1	// 'fileNum' >= (-1) -> ATab
	nop
	jge F0B41	// signed compare
	nop
// jumped away
// 			}
// 			{
// 				fileNum = -1;
	or NULL,ONES,A0	// -1 -> 0 -> ET3f
	stx A0,(I0)/*V*/	// ET3f ==> ET3c
F0B41:
// 				return 3;
	j F0B1
	ldc 3,A0	// 3 -> 1 -> ET40
// jumped away
F0B38:
// 			}
// 			else
// 			{
// 				fileNum -= 1;
	ldx (I0),A0/*V*/	// ET3c ==> 'fileNum'
	j F0B39
	add A0,ONES,A0	// 'fileNum' + (-1) -> ET3e
// jumped away
F0B36:
// 		if (c == '+')
	ldc 45,A0	// 45 -> 0 -> ET53
	jzc F0B43	// signed compare
	ldc _volume,I0	// ET42
// jumped away
// 		}
// 		{
// 			if (volume > 0)
	ldx (I0),A1/*V*/	// ET42 ==> 'volume'
	sub A1,NULL,A1	// 'volume' <= (0) -> (0)
	ldc 228,C0
	jle F0B45	// signed compare
	ldc _stdaudioout,I2
// jumped away
// 			}
// 			{
// 				volume = volume - 6;
	ldc 6,A0	// 6 -> 0 -> ET43
	sub A1,A0,A0	// 'volume' - ET43 -> ET44
	stx A0,(I0)/*V*/	// ET44 ==> ET42
// 			ioctl(stdaudioout,228, (void *)(volume+256));
F0B45:
	ldc _volume,I0	// ET42
	ldc 256,A1	// 256 -> 0 -> ET45
	ldx (I0),A0/*V*/ ; ldy (I6)+1,NULL	// ET42 ==> 'volume'
	add A0,A1,A0 ; ldx (I2),I2/*V*/	// 'volume' + ET45 -> ET46
	call _ioctl
	mv A0,I1	// ET46 -> ET47
// jumped away
//  vo_printf("~%04x=%d\n",0x0206, 30-volume/6);
	ldc 6,B1	// 6 -> 0 -> ET43
	call divide16signed
	ldx (I0),B0/*V*/ ; add B1,NULL,A0	// ET42 ==> 'volume'
// jumped away
	ldc 30,B1	// 30 -> 0 -> ET4b
	ldx (I6)+1,NULL ; sub B1,A0,A0	// I6 += 1
	stx A0,(I6)+1	// ET4d
	ldc 518,A0	// 518 -> 0 -> ET4e
	stx A0,(I6)+1	// ET4e
	ldc xd_16,A0	// ET4f
	call _vo_printf
	stx A0,(I6)	// ET4f
// jumped away
	ldc _anyButtonPressed,I0	// ET51
	sub NULL,ONES,A0 ; ldy (I6)-3,NULL	// I6 += -3
// 			anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET24 ==> ET51
// 			idleMode = 0;
	ldc _idleMode,I0	// ET52
	stx A0,(I0)/*V*/	// ET33 ==> ET52
// 			return 4;
	j F0B1
	ldc 4,A0	// 4 -> 1 -> ET2c
// jumped away
F0B43:
// 		if (c == '-')
	sub A1,A0,B1	// 'c' != ET53 -> ATae
	ldc 82,A0	// 82 -> 0 -> ET58
	jzc F0B50	// signed compare
	sub A1,A0,B1	// 'c' != ET58 -> ATb6
// jumped away
// 		}
// 		{
// 			if (volume < 180)
	ldc 180,A0	// 180 -> 0 -> ET54
	ldx (I0),A1/*V*/	// ET42 ==> 'volume'
	sub A1,A0,B1	// 'volume' >= ET54 -> ATb5
	ldc 228,C0
	jge F0B52	// signed compare
	ldc _stdaudioout,I2
// jumped away
// 			}
// 			{
// 				volume = volume + 6;
	ldc 6,A0	// 6 -> 0 -> ET43
	add A1,A0,A0	// 'volume' + ET43 -> ET55
	stx A0,(I0)/*V*/	// ET55 ==> ET42
// 			ioctl(stdaudioout,228, (void *)(volume+256));
F0B52:
	ldc _volume,I0	// ET42
	ldc 256,A1	// 256 -> 0 -> ET45
	ldx (I0),A0/*V*/ ; ldy (I6)+1,NULL	// ET42 ==> 'volume'
	add A0,A1,A0 ; ldx (I2),I2/*V*/	// 'volume' + ET45 -> ET46
	call _ioctl
	mv A0,I1	// ET46 -> ET47
// jumped away
//  vo_printf("~%04x=%d\n",0x0206, 30-volume/6);
	ldc 6,B1	// 6 -> 0 -> ET43
	call divide16signed
	ldx (I0),B0/*V*/ ; add B1,NULL,A0	// ET42 ==> 'volume'
// jumped away
	ldc 30,B1	// 30 -> 0 -> ET4b
	ldx (I6)+1,NULL ; sub B1,A0,A0	// I6 += 1
	stx A0,(I6)+1	// ET4d
	ldc 518,A0	// 518 -> 0 -> ET4e
	stx A0,(I6)+1	// ET4e
	ldc xd_16,A0	// ET4f
	call _vo_printf
	stx A0,(I6)	// ET4f
// jumped away
	ldc _anyButtonPressed,I0	// ET51
	sub NULL,ONES,A0 ; ldy (I6)-3,NULL	// I6 += -3
// 			anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET24 ==> ET51
// 			idleMode = 0;
	ldc _idleMode,I0	// ET52
	stx A0,(I0)/*V*/	// ET33 ==> ET52
// 			return 5;
	j F0B1
	ldc 5,A0	// 5 -> 1 -> ET31
// jumped away
F0B50:
// 		if (c == 'R')
	ldc 80,A0	// 80 -> 0 -> ET60
	jzc F0B57	// signed compare
	ldc _repeatSongStatus,I0	// ET34
// jumped away
// 		}
// 		{
// 			repeatSongStatus = !repeatSongStatus;
	ldx (I0),A0/*V*/ ; and NULL,NULL,A1	// ET34 ==> 'repeatSongStatus'
	sub A0,NULL,A0	// 'repeatSongStatus' != (0) -> (0)
	nop	// ET34
	jzc F0B59	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A1	// 1 -> ET5a
F0B59:
	stx A1,(I0)/*V*/ ; sub A1,NULL,A1	// ET5a ==> ET34
// 			if (repeatSongStatus == 0)
	ldc repeato_18,A0	// ET5d
	jzc F0B61	// unsigned compare
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
	ldc repeato_17,A0	// ET5b
// 			}
// 			{
//  vo_printf("Repeat : off");
	call _vo_printf
	stx A0,(I6)	// ET5b
// jumped away
F0B62:
	ldx (I6)-1,NULL	// I6 += -1
// 			return 6;
	j F0B1
	ldc 6,A0	// 6 -> 1 -> ET5f
// jumped away
F0B61:
// 			}
// 			else
// 			{
//  vo_printf("Repeat : on");
	stx A0,(I6)	// ET5d
	call _vo_printf
	ldc F0B62,LR0
// jumped away
F0B57:
// 		if (c == 'P')
	sub A1,A0,B1	// 'c' != ET60 -> ATbe
	ldc _audioDecoder,I0	// ET28
	jzc F0B66	// signed compare
	nop	// 40 -> 1 -> ET62
// jumped away
// 		}
// 		{
// 			audioDecoder->pause = !audioDecoder->pause;
	lsr A0,A1 ; ldx (I0),A0/*V*/
	add A0,A1,A0	// 'audioDecoder' + ET62 -> ATd9
	mv A0,I0 ; and NULL,NULL,A1	// ATd9 -> ET63
	ldx (I0),A0/*V*/	// ET63 ==> 40 -> ET64
	sub A0,NULL,A0	// ET64 != (0) -> (0)
	ldc 40,A0
	jzc F0B68	// signed compare
	ldc _audioDecoder,I0
// jumped away
	sub NULL,ONES,A1	// 1 -> AT61
F0B68:
	ldx (I0),B0/*V*/ ; ldy (I6)+1,NULL	// ET28 ==> 'audioDecoder'
	add B0,A0,B0	// 'audioDecoder' + ET62 -> ATdb
	mv B0,I2	// ATdb -> ET63
	stx A1,(I2)/*V*/	// AT61 ==> ET63
// 			if (audioDecoder->pause)
	ldx (I0),A1/*V*/	// ET28 ==> 'audioDecoder'
	add A1,A0,A0	// 'audioDecoder' + ET62 -> ATda
	mv A0,I0	// ATda -> ET63
	ldx (I0),A0/*V*/	// ET63 ==> 40 -> ET65
	sub A0,NULL,A0	// ET65 == (0) -> (0)
	ldc playing_20,A0	// ET68
	jzs F0B70	// signed compare
	nop	// I6 += 1
// jumped away
	ldc pausing_19,A0	// ET66
// 			}
// 			{
//  vo_printf("PAUSING \n");
	call _vo_printf
	stx A0,(I6)	// ET66
// jumped away
F0B71:
	ldx (I6)-1,NULL	// I6 += -1
// 			return 9;
	j F0B1
	ldc 9,A0	// 9 -> 1 -> ET6a
// jumped away
F0B70:
// 			}
// 			else
// 			{
//  vo_printf("PLAYING \n");
	stx A0,(I6)	// ET68
	call _vo_printf
	ldc F0B71,LR0
// jumped away
F0B66:
// 		if (c == 'i')
	ldc 105,A0	// 105 -> 0 -> ET6b
	sub A1,A0,B1	// 'c' != ET6b -> ATc2
	ldc 107,A0	// 107 -> 0 -> ET71
	jzc F0B75	// signed compare
	sub A1,A0,B1	// 'c' != ET71 -> ATc6
// jumped away
// 		}
// 		{
// 			anyButtonPressed = 1;
	ldc _anyButtonPressed,I0	// ET51
	sub NULL,ONES,A0	// 1 -> 1 -> ET24
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET24 ==> ET51
// 			idleMode = 0;
	ldc _idleMode,I0	// ET52
	stx A0,(I0)/*V*/	// ET33 ==> ET52
// 			switch (currentMenu)
	ldc _currentMenu,I0	// ET6c
	ldx (I0),A0/*V*/	// ET6c ==> 'currentMenu'
	add A0,ONES,A1	// 'currentMenu' + (-1) -> ET6d
	ldc 4,A0	// 4 -> 1 -> ET2c
	sub A0,A1,B1	// ET2c > ET6d -> ATc5
	ldc JumpTable_21,A0	// ET6e
	jcc F0B76	// unsigned compare
	nop
// jumped away
	add A1,A0,A0	// ET6d + ET6e -> ATdc
	mv A0,I0	// ATdc -> ET6f
	ldx (I0),A0	// ET6f ==> ET70
	mv A0,LR0
	jr
	nop
// jumped away
F0B77:
// 					loadSongsMenu();
	call _loadSongsMenu
	nop
// jumped away
F0B76:
// 			return 14;
	j F0B1
	ldc 14,A0	// 14 -> 1 -> ET37
// jumped away
F0B78:
// 					break;
	j F0B76
	nop
// jumped away
F0B79:
	ldx (I6)+1,NULL ; sub NULL,ONES,A0	// I6 += 1
// 					moveBoxSelection((1));
	call _moveBoxSelection
	stx A0,(I6)	// ET24
// jumped away
// 					break;
	j F0B76
	ldx (I6)-1,NULL	// I6 += -1
// jumped away
F0B80:
	ldx (I6)+1,NULL ; sub NULL,ONES,A0	// I6 += 1
// 					moveBoxSelection((1));
	call _moveBoxSelection
	stx A0,(I6)	// ET24
// jumped away
// 					break;
	j F0B76
	ldx (I6)-1,NULL	// I6 += -1
// jumped away
F0B81:
	ldx (I6)+1,NULL ; sub NULL,ONES,A0	// I6 += 1
// 					moveBoxSelection((1));
	call _moveBoxSelection
	stx A0,(I6)	// ET24
// jumped away
// 					break;
	j F0B76
	ldx (I6)-1,NULL	// I6 += -1
// jumped away
F0B75:
// 		if (c == 'k')
	ldc 111,A0	// 111 -> 0 -> ET75
	jzc F0B89	// signed compare
	sub A1,A0,B1	// 'c' != ET75 -> ATc9
// jumped away
// 		}
// 		{
// 			anyButtonPressed = 1;
	ldc _anyButtonPressed,I0	// ET51
	sub NULL,ONES,A0	// 1 -> 1 -> ET24
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET24 ==> ET51
// 			idleMode = 0;
	ldc _idleMode,I0	// ET52
	stx A0,(I0)/*V*/	// ET33 ==> ET52
// 			switch (currentMenu)
	ldc _currentMenu,I0	// ET6c
	ldx (I0),A0/*V*/	// ET6c ==> 'currentMenu'
	add A0,ONES,A1	// 'currentMenu' + (-1) -> ET6d
	ldc 4,A0	// 4 -> 1 -> ET2c
	sub A0,A1,B1	// ET2c > ET6d -> ATc8
	ldc JumpTable_22,A0	// ET72
	jcc F0B90	// unsigned compare
	nop
// jumped away
	add A1,A0,A0	// ET6d + ET72 -> ATdd
	mv A0,I0	// ATdd -> ET73
	ldx (I0),A0	// ET73 ==> ET74
	mv A0,LR0
	jr
	nop
// jumped away
F0B91:
// 					loadPlaylistsMenu();
	call _loadPlaylistsMenu
	nop
// jumped away
F0B90:
// 			return 13;
	j F0B1
	ldc 13,A0	// 13 -> 1 -> ET27
// jumped away
F0B92:
// 					break;
	j F0B90
	nop
// jumped away
F0B93:
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
// 					moveBoxSelection((0));
	call _moveBoxSelection
	stx A0,(I6)	// ET33
// jumped away
// 					break;
	j F0B90
	ldx (I6)-1,NULL	// I6 += -1
// jumped away
F0B94:
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
// 					moveBoxSelection((0));
	call _moveBoxSelection
	stx A0,(I6)	// ET33
// jumped away
// 					break;
	j F0B90
	ldx (I6)-1,NULL	// I6 += -1
// jumped away
F0B95:
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
// 					moveBoxSelection((0));
	call _moveBoxSelection
	stx A0,(I6)	// ET33
// jumped away
// 					break;
	j F0B90
	ldx (I6)-1,NULL	// I6 += -1
// jumped away
F0B89:
// 		if (c == 'o')
	ldc 108,A0	// 108 -> 0 -> ET7a
	jzc F0B103	// signed compare
	sub A1,A0,B1	// 'c' != ET7a -> ATcc
// jumped away
// 		}
// 		{
// 			anyButtonPressed = 1;
	ldc _anyButtonPressed,I0	// ET51
	sub NULL,ONES,A0	// 1 -> 1 -> ET24
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET24 ==> ET51
// 			idleMode = 0;
	ldc _idleMode,I0	// ET52
	stx A0,(I0)/*V*/	// ET33 ==> ET52
// 			switch (currentMenu)
	ldc _currentMenu,I0	// ET6c
	ldx (I0),A0/*V*/	// ET6c ==> 'currentMenu'
	add A0,ONES,A1	// 'currentMenu' + (-1) -> ET6d
	ldc 4,A0	// 4 -> 1 -> ET2c
	sub A0,A1,B1	// ET2c > ET6d -> ATcb
	ldc JumpTable_23,A0	// ET76
	jcc F0B104	// unsigned compare
	nop
// jumped away
	add A1,A0,A0	// ET6d + ET76 -> ATde
	mv A0,I0	// ATde -> ET77
	ldx (I0),A0	// ET77 ==> ET78
	mv A0,LR0
	jr
	nop
// jumped away
F0B105:
// 					loadArtistsMenu();
	call _loadArtistsMenu
	ldc F0B104,LR0
// jumped away
F0B109:
// 					loadMainMenu();
	call _loadMainMenu
	nop
// jumped away
F0B104:
// 			return 12;
	j F0B1
	ldc 12,A0	// 12 -> 1 -> ET79
// jumped away
F0B106:
// 					loadMainMenu();
	call _loadMainMenu
	ldc F0B104,LR0
// jumped away
F0B107:
// 					loadMainMenu();
	call _loadMainMenu
	ldc F0B104,LR0
// jumped away
F0B108:
// 					loadMainMenu();
	call _loadMainMenu
	ldc F0B104,LR0
// jumped away
F0B103:
// 		if (c == 'l')
	ldc 115,A0	// 115 -> 0 -> ET81
	jzc F0B118	// signed compare
	ldc _anyButtonPressed,I0	// ET51
// jumped away
// 		}
// 		{
// 			anyButtonPressed = 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET24
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET24 ==> ET51
// 			idleMode = 0;
	ldc _idleMode,I0	// ET52
	stx A0,(I0)/*V*/ ; sub NULL,ONES,A1	// ET33 ==> ET52
// 			switch (currentMenu)
	ldc _currentMenu,I0	// ET6c
	ldx (I0),A0/*V*/	// ET6c ==> 'currentMenu'
	sub A0,A1,A1	// 'currentMenu' == ET24 -> ATce
	nop
	callzs _loadInfoMenu
	ldc F0B120,LR0
// jumped away
	ldc 4,A1	// 4 -> 1 -> ET2c
	ldx (I0),A0/*V*/	// ET6c ==> 'currentMenu'
	sub A0,A1,A1	// 'currentMenu' == ET2c -> ATd1
	nop
	jzs F0B123	// unsigned compare
	nop
// jumped away
F0B119:
// 			return 11;
	j F0B1
	ldc 11,A0	// 11 -> 1 -> ET80
// jumped away
F0B123:
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
// 					path = retrieveSongLocation(&index, 0);
	stx A0,(I6)+1	// ET33
	ldc _index,A0	// ET7b
	call _retrieveSongLocation
	stx A0,(I6)	// ET7b
// jumped away
	ldc _path,I0	// ET7d
	stx A0,(I0)/*V*/ ; ldy (I6)-1,NULL	// I6 += 1
//  vo_printf("%s - %i \n", path, index);
	ldc _index,I0	// ET7b
	ldx (I0),A1/*V*/	// ET7b ==> 'index'
	stx A1,(I6)+1	// 'index'
	stx A0,(I6)+1	// ET7c
	ldc si_24,A0	// ET7e
	call _vo_printf
	stx A0,(I6)	// ET7e
// jumped away
// 					break;
	j F0B119
	ldx (I6)-3,NULL	// I6 += -3
// jumped away
F0B120:
// 					loadInfoMenu();
	j F0B119
	nop
// jumped away
F0B118:
// 		if (c == 's')
	sub A1,A0,B1	// 'c' != ET81 -> ATcf
	ldc _charging,I0	// ET82
	jzc F0B128	// signed compare
	nop
// jumped away
	ldy (I6)+1,NULL ; ldx (I0),A0/*V*/	// I6 += 1
// 		}
// 		{
//  vo_printf("Charging:  %i \n", charging);
	stx A0,(I6)+1	// 'charging'
	ldc charging_25,A0	// ET83
	call _vo_printf
	stx A0,(I6)	// ET83
// jumped away
	ldc _volume,I0	// ET42
	ldy (I6)-1,NULL ; ldx (I0),A0/*V*/	// I6 += 1
//  vo_printf("Volume:    %i \n", volume);
	stx A0,(I6)+1	// 'volume'
	ldc volume_26,A0	// ET85
	call _vo_printf
	stx A0,(I6)	// ET85
// jumped away
	ldc _shuffle,I0	// ET87
	ldy (I6)-1,NULL ; ldx (I0),A0/*V*/	// I6 += 1
//  vo_printf("Shuffling: %i \n", shuffle);
	stx A0,(I6)+1	// 'shuffle'
	ldc shuffling_27,A0	// ET88
	call _vo_printf
	stx A0,(I6)	// ET88
// jumped away
	ldc _repeatSongStatus,I0	// ET34
	ldy (I6)-1,NULL ; ldx (I0),A0/*V*/	// I6 += 1
//  vo_printf("Repeating: %i \n", repeatSongStatus);
	stx A0,(I6)+1	// 'repeatSongStatus'
	ldc repeating_28,A0	// ET8a
	call _vo_printf
	stx A0,(I6)	// ET8a
// jumped away
	ldc _mute,I0	// ET8c
	ldy (I6)-1,NULL ; ldx (I0),A0/*V*/	// I6 += 1
//  vo_printf("Mute:      %i \n", mute);
	stx A0,(I6)+1	// 'mute'
	ldc mute_29,A0	// ET8d
	call _vo_printf
	stx A0,(I6)	// ET8d
// jumped away
	ldc 12,A0	// 12 -> 1 -> ET79
// 			return 12;
	j F0B1
	ldx (I6)-2,NULL	// I6 += -2
// jumped away
F0B128:
// 		if (isdigit(c))
	call _isdigit
	mv A1,I0	// 'c' -> I0
// jumped away
	sub A0,NULL,A0	// ET8f == (0) -> (0)
	ldc 65,A0	// 65 -> 0 -> ET93
	jzs F0B135	// signed compare
	ldc _fileNum,I0	// ET3c
// jumped away
// 		}
// 		{
// 			fileNum = c-'0';
	ldc 48,A0	// 48 -> 0 -> ET90
	sub A1,A0,A0	// 'c' - ET90 -> ET91
	stx A0,(I0)/*V*/ ; sub NULL,ONES,A0	// ET91 ==> ET3c
// 			audioDecoder->cs.cancel = 1;
	ldc _audioDecoder,I0	// ET28
	ldx (I0),I0/*V*/	// ET28 ==> 'audioDecoder'
	ldx (I0)+7,NULL	// ET29 += 13
	ldx (I0)+6,NULL	// ...
	stx A0,(I0)/*V*/	// ET26 ==> ET29
// 			return 10;
	j F0B1
	ldc 10,A0	// 10 -> 1 -> ET92
// jumped away
F0B135:
// 	   if (c == 'A')
	sub A1,A0,A1	// 'c' != ET93 -> ATd4
	ldc _auxChoice,I0	// ET95
	jzc F0B4	// signed compare
	nop
// jumped away
// 	   }
// 	   {
// 	      auxChoice = !auxChoice;
	ldx (I0),A0/*V*/ ; and NULL,NULL,A1	// ET95 ==> 'auxChoice'
	sub A0,NULL,A0	// 'auxChoice' != (0) -> (0)
	nop	// ET95
	jzc F0B140	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A1	// 1 -> ET96
F0B140:
	stx A1,(I0)/*V*/ ; sub A1,NULL,A1	// ET96 ==> ET95
// 	      if (auxChoice)
	ldc auxchoice_30,I2	// I2
	jzc F0B141	// unsigned compare
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
// 		   }
// 		   else
// 		   {
//  vo_puts("auxchoice = AUX3");
	call _vo_puts
	ldc auxchoice_31,I2	// I2
// jumped away
F0B143:
// 		   return 11;
	j F0B1
	ldc 11,A0	// 11 -> 1 -> ET80
// jumped away
F0B141:
// 		   }
// 	      {
//  vo_puts("auxChoice = AUX2");
	call _vo_puts
	ldc F0B143,LR0
// jumped away
F0B4:
// 	return 0;
	j F0B1
	and NULL,NULL,A0	// 0 -> 1 -> ET33
// jumped away

//_____________________________________________________________
//
	.sect data_x,const_x	// 699 words
ctogg_1:
	.word "'C' = Toggle capacitive button output to UART"

	.zero 1
play_2:
	.word "'>' = Play next song"

	.zero 1
play_3:
	.word "'<' = Play previous song"

	.zero 1
volu_4:
	.word "'+' = Volume up"

	.zero 1
volu_5:
	.word "'-' = Volume down"

	.zero 1
rtogg_6:
	.word "'R' = Toggle repeat song mode"

	.zero 1
ptogg_7:
	.word "'P' = Toggle Play/Pause"

	.zero 1
ipres_8:
	.word "'i' = Press top left screen button"

	.zero 1
kpres_9:
	.word "'k' = Press bottom left screen button"

	.zero 1
opres_10:
	.word "'o' = Press top right screen button"

	.zero 1
lpres_11:
	.word "'l' = Press bottom right screen button"

	.zero 1
sprin_12:
	.word "'s' = Prints various variable statuses"

	.zero 1
atogg_13:
	.word "'A' = Toggle which analog pin is read for battery percentage"

	.zero 1
hprin_14:
	.word "'h' = Prints this help menu"

	.zero 1
se_15:
	.word "'0-9' = sets the song index to the chosen number"

	.zero 1
xd_16:
	.word "~%04x=%d\n"

	.zero 1
repeato_17:
	.word "Repeat : off"

	.zero 1
repeato_18:
	.word "Repeat : on"

	.zero 1
pausing_19:
	.word "PAUSING \n"

	.zero 1
playing_20:
	.word "PLAYING \n"

	.zero 1
JumpTable_21:
	.word F0B77, F0B79, F0B81, F0B80, F0B78
JumpTable_22:
	.word F0B91, F0B93, F0B95, F0B94, F0B92
JumpTable_23:
	.word F0B105, F0B107, F0B109, F0B108, F0B106
si_24:
	.word "%s - %i \n"

	.zero 1
charging_25:
	.word "Charging:  %i \n"

	.zero 1
volume_26:
	.word "Volume:    %i \n"

	.zero 1
shuffling_27:
	.word "Shuffling: %i \n"

	.zero 1
repeating_28:
	.word "Repeating: %i \n"

	.zero 1
mute_29:
	.word "Mute:      %i \n"

	.zero 1
auxchoice_30:
	.word "auxChoice = AUX2"

	.zero 1
auxchoice_31:
	.word "auxchoice = AUX3"

	.zero 1

	.end
