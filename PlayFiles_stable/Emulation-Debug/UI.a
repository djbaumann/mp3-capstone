
//_____________________________________________________________
//
	.sect code,loadMainMenu	// 60 words
	.export _loadMainMenu
_loadMainMenu:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	stx B0,(I6) ; sub NULL,ONES,A1	// 1 -> 1 -> ET0
	sty B1,(I6)+1
	stx I0,(I6)+1 ; sty I2,(I6)
// 	LcdInit(1);
	call _LcdInit
	stx A1,(I6)	// ET0
// jumped away
// 	monitorVoltage();
	call _monitorVoltage
	ldx (I6)-1,NULL	// I6 += -1
// jumped away
	ldc mainmenu_1,A0	// ET2
	ldx (I6)+1,NULL	// I6 += 1
// 	LcdTextOutXY(1,1, "MAIN MENU");
	stx A0,(I6)+1	// ET2
	stx A1,(I6)+1	// ET0
	call _LcdTextOutXY
	stx A1,(I6)	// ET0
// jumped away
	ldc 63488,A0	// 63488 -> 1 -> ET4
	ldc _lcd0+4,I0	// ET7
	ldc 50,B1	// 50 -> 1 -> ET9
	ldy (I6)-2,NULL ; stx A0,(I0)	// I6 += 1
// 	lcd0.textColor =((u_int16)((((255)>>3)<<11)|((((0)>>2)&0x3f)<<5)|(((0)>>3)&0x1f)));
// 	LcdTextOutXY(1,50, "ARTISTS");
	ldc artists_2,A0	// ET8
	stx A0,(I6)+1	// ET8
	stx B1,(I6)+1	// ET9
	call _LcdTextOutXY
	stx A1,(I6)	// ET0
// jumped away
	ldc playlists_3,A0	// ETb
	ldc 300,B0	// 300 -> 1 -> ETc
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(1,300, "PLAYLISTS");
	stx A0,(I6)+1	// ETb
	stx B0,(I6)+1	// ETc
	call _LcdTextOutXY
	stx A1,(I6)	// ET0
// jumped away
	ldc songs_4,A0	// ETe
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(200,50, "SONGS");
	stx A0,(I6)+1	// ETe
	stx B1,(I6)+1	// ET9
	ldc 200,B1	// 200 -> 1 -> ETf
	call _LcdTextOutXY
	stx B1,(I6)	// ETf
// jumped away
	ldc info_5,A0	// ET11
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(200,300, "INFO");
	stx A0,(I6)+1	// ET11
	stx B0,(I6)+1	// ETc
	call _LcdTextOutXY
	stx B1,(I6)	// ETf
// jumped away
	ldc _lcd0+6,I2	// ET14
	ldy (I6)-3,NULL ; ldx (I2),A0	// I6 += -3
// 	lcd0.textColor = lcd0.defaultTextColor;
	stx A0,(I0) ; ldy (I6),I2	// ET15 ==> ET7
// 	currentMenu =(1);
	ldc _currentMenu,I0	// ET16
	stx A1,(I0)/*V*/	// ET0 ==> ET16
	ldx (I6)-1,I0
	ldy (I6),B1 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,drawCommonMenuItems	// 104 words
	.export _drawCommonMenuItems
_drawCommonMenuItems:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	stx B0,(I6) ; sub NULL,ONES,A1	// 1 -> 1 -> ET0
	sty B1,(I6)+1
	stx I0,(I6)+1 ; sty I2,(I6)
// 	LcdInit(1);
	call _LcdInit
	stx A1,(I6)	// ET0
// jumped away
// 	monitorVoltage();
	call _monitorVoltage
	ldx (I6)-1,NULL	// I6 += -1
// jumped away
	ldx (I4)-2,NULL ; ldy (I6)+1,NULL	// I4 += -2
// 	LcdTextOutXY(1,1, title);
	ldx (I4)+2,A0	// unspill 'title' from #0
	stx A0,(I6)+1	// 'title'
	stx A1,(I6)+1	// ET0
	call _LcdTextOutXY
	stx A1,(I6)	// ET0
// jumped away
	ldc 63488,A0	// 63488 -> 1 -> ET3
	ldc _lcd0+4,I0	// ET6
	ldc 20,B0	// 20 -> 1 -> ET8
	ldy (I6)-2,NULL ; stx A0,(I0)	// I6 += 1
// 	lcd0.textColor =((u_int16)((((255)>>3)<<11)|((((0)>>2)&0x3f)<<5)|(((0)>>3)&0x1f)));
// 	LcdTextOutXY(200,20, "BACK");
	ldc back_6,A0	// ET7
	stx A0,(I6)+1	// ET7
	ldc 200,A0	// 200 -> 1 -> ET9
	stx B0,(I6)+1	// ET8
	call _LcdTextOutXY
	stx A0,(I6)	// ET9
// jumped away
	ldc 5,A0	// 5 -> 1 -> ETb
	ldx (I4)-3,NULL ; ldy (I6)-3,NULL	// I4 += -3
// 	if (menu !=(5))
	ldx (I4)+3,A1	// unspill 'menu' from #-3
	sub A1,A0,B1	// 'menu' != ETb -> AT29
	ldc up_7,A0
	jzc F1B7	// unsigned compare
	nop
// jumped away
F1B8:
// 	currentMenu = menu;
	ldc _currentMenu,I0	// ET28
	stx A1,(I0)/*V*/ ; ldy (I6),I2	// 'menu' ==> ET28
	ldx (I6)-1,I0
	ldy (I6),B1 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
	ldc up_7,A0	// ETc
F1B7:
	ldx (I6)+1,NULL	// I6 += 1
// 	}
// 	{
// 		LcdTextOutXY(10,20, "UP");
	stx A0,(I6)+1	// ETc
	stx B0,(I6)+1	// ET8
	ldc 10,B0	// 10 -> 1 -> ETd
	call _LcdTextOutXY
	stx B0,(I6)	// ETd
// jumped away
	ldc down_8,A0	// ETf
	ldc 310,B1	// 310 -> 1 -> ET10
	ldx (I6)-2,NULL	// I6 += 1
// 		LcdTextOutXY(10,310, "DOWN");
	stx A0,(I6)+1	// ETf
	stx B1,(I6)+1	// ET10
	call _LcdTextOutXY
	stx B0,(I6)	// ETd
// jumped away
	ldc select_9,A0	// ET12
	ldx (I6)-2,NULL	// I6 += 1
// 		LcdTextOutXY(190,310, "SELECT");
	stx A0,(I6)+1	// ET12
	ldc 190,A0	// 190 -> 1 -> ET13
	stx B1,(I6)+1	// ET10
	call _LcdTextOutXY
	stx A0,(I6)	// ET13
// jumped away
	ldc 65504,A0	// 65504 -> 1 -> ET15
	ldy (I6)-2,NULL ; stx A0,(I0)	// I6 += 1
// 		lcd0.textColor =((u_int16)((((255)>>3)<<11)|((((255)>>2)&0x3f)<<5)|(((0)>>3)&0x1f)));
// 		LcdTextOutXY(10, 30,  "--------------------------------");
	ldc String_10,A0	// ET16
	stx A0,(I6)+1	// ET16
	ldc 30,A0	// 30 -> 1 -> ET17
	stx A0,(I6)+1	// ET17
	call _LcdTextOutXY
	stx B0,(I6)	// ETd
// jumped away
	ldc String_11,A0	// ET19
	ldc 40,B1	// 40 -> 1 -> ET1a
	ldx (I6)-2,NULL	// I6 += 1
// 		LcdTextOutXY(7, 40,  "|");
	stx A0,(I6)+1	// ET19
	ldc 7,A0	// 7 -> 1 -> ET1b
	stx B1,(I6)+1	// ET1a
	call _LcdTextOutXY
	stx A0,(I6)	// ET1b
// jumped away
	ldc String_11,A0	// ET19
	ldx (I6)-2,NULL	// I6 += 1
// 		LcdTextOutXY(230, 40,  "|");
	stx A0,(I6)+1	// ET19
	ldc 230,A0	// 230 -> 1 -> ET1d
	stx B1,(I6)+1	// ET1a
	call _LcdTextOutXY
	stx A0,(I6)	// ET1d
// jumped away
	ldc String_10,A0	// ET16
	ldx (I6)-2,NULL	// I6 += 1
// 		LcdTextOutXY(10, 50,  "--------------------------------");
	stx A0,(I6)+1	// ET16
	ldc 50,A0	// 50 -> 1 -> ET1f
	stx A0,(I6)+1	// ET1f
	call _LcdTextOutXY
	stx B0,(I6)	// ETd
// jumped away
	ldc _lcd0+6,I2	// ET22
	ldx (I2),A0 ; ldy (I6)-3,NULL	// I6 += -3
// 		lcd0.textColor = lcd0.defaultTextColor;
	stx A0,(I0) ; and NULL,NULL,A0	// ET23 ==> ET6
// 		pageNum = 0;
	ldc _pageNum,I0	// ET25
	stx A0,(I0)/*V*/	// ET24 ==> ET25
// 		arrowSelection = 0;
	ldc _arrowSelection,I0	// ET27
	j F1B8
	stx A0,(I0)/*V*/	// ET26 ==> ET27
// jumped away

//_____________________________________________________________
//
	.sect code,drawMenuListOptions	// 156 words
	.export _drawMenuListOptions
_drawMenuListOptions:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+3,I4
	stx A0,(I6) ; sty A1,(I6)+1
	stx B0,(I6) ; sty B1,(I6)+1
	stx C0,(I6) ; sty C1,(I6)+1
	stx D0,(I6) ; sty D1,(I6)+1
	stx I0,(I6) ; sty I1,(I6)+1
	stx I2,(I6) ; sty I3,(I6)+1
	stx LC,(I6) ; sty LS,(I6)+1
	ldc 8,LC	// loop 9 iterations
	stx LE,(I6) ; and NULL,NULL,A1
// (i = 0; i < 9; i++)
	loop LC,F2B4-1
	nop
//loop resumes
	ldc String_12,A0	// ET2
	ldx (I6)+1,NULL	// I6 += 1
// 	}
// 	{
// 	    LcdTextOutXY(20, 40 + (i * 30), "                              ");
	stx A0,(I6)+1	// ET2
	ldc 30,A0	// 30 -> 1 -> ET4
	muluu A1,A0	// 'i' * ET4 -> P
	ldc 40,A0	// 40 -> 1 -> ET3
	add NULL,P,B	// P -> AT28
	add A0,B0,A0	// ET3 + ET5 -> ET6
	stx A0,(I6)+1	// ET6
	ldc 20,A0	// 20 -> 1 -> ET7
	call _LcdTextOutXY
	stx A0,(I6)	// ET7
// jumped away
	ldx (I6)-3,NULL ; sub A1,ONES,A1	// I6 += -3
//	(0 nop's needed)
// loop end
F2B4:	// loop exit
	ldc _filehandle,I0	// ETe
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
//  vo_fseek(filehandle, 0,0);
	stx A0,(I6)+1 ; and A,NULL,A	// ETc
	stx A0,(I6)+1	// A0
	stx A1,(I6)+1	// A1
	ldx (I0),A0/*V*/	// ETe ==> 'filehandle'
	call _vo_fseek
	stx A0,(I6)	// 'filehandle'
// jumped away
// 	for (i = 0; i < pageNum * 9; i++)
	j F2B12
	ldx (I6)-4,NULL ; and NULL,NULL,A1	// I6 += -4
// jumped away
F2B9:	// (loop lvl 2)
// 	}
// 	{
//  vo_fgets(buffer, sizeof(buffer), filehandle);
	stx A0,(I6)+1	// 'filehandle'
	ldc 128,A0	// 128 -> 0 -> ET12
	stx A0,(I6)+1	// ET12
	ldc _buffer,A0	// ET13
	call _vo_fgets
	stx A0,(I6)	// ET13
// jumped away
	ldx (I6)-3,NULL ; sub A1,ONES,A1	// I6 += -3
F2B12:	// (loop lvl 2)
	ldc 9,A0	// 9 -> 1 -> ET1
	ldc _pageNum,I0	// ET10
	ldx (I0),B0/*V*/ ; ldy (I6)+1,NULL	// ET10 ==> 'pageNum'
	muluu B0,A0	// 'pageNum' * ET1 -> P
	add NULL,P,B	// P -> AT2a
	sub A1,B0,B0	// 'i' < ET11 -> AT2b
	ldc _filehandle,I0	// ETe
	jcc F2B9	// unsigned compare
	ldx (I0),A0/*V*/	// I6 += 1
// jumped away
// 	topOfList = vo_ftell(filehandle);
	call _vo_ftell
	stx A0,(I6)	// 'filehandle'
// jumped away
	ldc _endOfFile,I2	// ET1d
	ldc 40,D0	// 40 -> 1 -> ET3
	ldc 30,D1	// 30 -> 1 -> ET4
	ldc _filehandle,I3	// ETe
	ldc 128,B1	// 128 -> 0 -> ET12
	ldc _buffer,B0	// ET13
	ldc 9,C0	// 9 -> 1 -> ET1
	ldc _topOfList,I0	// ET16
	lsr D0,C1 ; ldy (I6)-1,NULL
	stx A0,(I0)+1/*V*/	// I6 += -1
// 	for (i = 0; i <= 9; i++)
	j F2B18
	stx A1,(I0)-1/*V*/ ; and NULL,NULL,A1
// jumped away
F2B20:	// (loop lvl 2)
// 	    }
// 	    else
// 	    {
// 	        if (! vo_fgets(buffer, sizeof(buffer), filehandle))
	call _vo_fgets
	stx B0,(I6)	// ET13
// jumped away
	sub A0,NULL,A0 ; ldx (I6)-3,NULL	// I6 += -3
	nop
	jzs F2B28	// signed compare
	add A1,ONES,A0
// jumped away
// 			 }
// 	        else
// 	        {
// 	        	endOfFile = -1;
	ldc -1,A0	// -1 -> ET1f
	stx A0,(I2)/*V*/	// ET1f ==> ET1d
F2B21:	// (loop lvl 2)
	sub A1,ONES,A1	// 'i' - (-1) -> 'i'
F2B18:	// (loop lvl 2)
	sub C0,A1,A0	// ET1 > 'i' -> AT2d
	nop
	jcc F2B16	// unsigned compare
	sub A1,C0,A0	// 'i' >= ET1 -> AT2c
// jumped away
// 	}
// 	{
// 	    if (i < 9)
	ldy (I6)+1,NULL ; ldx (I3),A0/*V*/	// I6 += 1
	stx A0,(I6)+1	// 'filehandle'
	jcs F2B20	// unsigned compare
	stx B1,(I6)+1	// ET12
// jumped away
// 	    }
// 	    {
// 	        if (vo_fgets(buffer, sizeof(buffer), filehandle))
	call _vo_fgets
	stx B0,(I6)	// ET13
// jumped away
	ldx (I6)-3,NULL ; sub A0,NULL,A0	// I6 += -3
	ldc _endOfFile,I0	// ET1d
	jzs F2B23	// signed compare
	nop
// jumped away
// 	        }
// 	        {
// 	            entry = strtok(buffer, "|");
	ldc String_11,I1	// I1
	call _strtok
	ldc _buffer,I0	// I0
// jumped away
	ldx (I4)+1,NULL ; ldy (I6)+1,NULL	// I4 += 1
	stx B0,(I4) ; sty B1,(I4) ; muluu A1,D1	// B0 spills to #0
// 	            LcdTextOutXY(20, 40 + (i * 30), entry);
	stx I0,(I6)+1 ; add NULL,P,B	// 'entry'
	add D0,B0,A0 ; ldy (I4),B1	// ET3 + ET5 -> ET6
	stx A0,(I6)+1	// ET6
	stx C1,(I6)	// ET7
	call _LcdTextOutXY
	ldx (I4)-1,B0	// unspill B0 from #0
// jumped away
	j F2B21
	ldx (I6)-3,NULL	// I6 += -3
// jumped away
F2B23:
// 	        }
// 	        else
// 	        {
// 	            endOfFile = i-1;
	add A1,ONES,A0	// 'i' + (-1) -> ET1b
	stx A0,(I0)/*V*/	// ET1b ==> ET1d
// 	            break;
F2B16:
	ldc _filehandle,I2	// ETe
	ldc _topOfList,I3	// ET16
	ldx (I6)+1,NULL ; and NULL,NULL,A1	// I6 += 1
//  vo_fseek(filehandle, topOfList,0);
	stx A1,(I6)+1	// ETc
	ldx (I3)+1,B0/*V*/
	ldx (I3)-1,B1/*V*/
	stx B0,(I6)+1	// B0
	stx B1,(I6)+1	// B1
	ldx (I2),A0/*V*/	// ETe ==> 'filehandle'
	call _vo_fseek
	stx A0,(I6)	// 'filehandle'
// jumped away
	ldy (I6)-3,NULL ; ldx (I2),A0/*V*/	// I6 += 1
//  vo_fgets(buffer, sizeof(buffer), filehandle);
	stx A0,(I6)+1	// 'filehandle'
	ldc 128,A0	// 128 -> 0 -> ET12
	stx A0,(I6)+1	// ET12
	ldc _buffer,A0	// ET13
	call _vo_fgets
	stx A0,(I6)	// ET13
// jumped away
	ldc _buffer,A0	// ET13
	ldx (I6)-2,NULL	// I6 += 1
//  vo_printf("Top of List buffer : %s", buffer);
	stx A0,(I6)+1	// ET13
	ldc topoflis_13,A0	// ET23
	call _vo_printf
	stx A0,(I6)	// ET23
// jumped away
	ldx (I6)-1,NULL	// I6 += 1
//  vo_fseek(filehandle, topOfList,0);
	stx A1,(I6)+1	// ETc
	ldx (I3)+1,A0/*V*/
	ldx (I3)-1,A1/*V*/
	stx A0,(I6)+1	// A0
	stx A1,(I6)+1	// A1
	ldx (I2),A0/*V*/	// ETe ==> 'filehandle'
	call _vo_fseek
	stx A0,(I6)	// 'filehandle'
// jumped away
	ldx (I6)-4,NULL	// I6 += -4
	ldx (I6)-1,LE
	ldy (I6),LS ; ldx (I6)-1,LC
	ldy (I6),I3 ; ldx (I6)-1,I2
	ldy (I6),I1 ; ldx (I6)-1,I0
	ldy (I6),D1 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,C0
	ldy (I6),B1 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
// 	        }
// 	        {
// 	            endOfFile = i-1;
	add A1,ONES,A0	// 'i' + (-1) -> ET1c
F2B28:	// (loop lvl 2)
	j F2B21
	stx A0,(I2)/*V*/	// ET1c ==> ET1d
// jumped away

//_____________________________________________________________
//
	.sect code,loadArtistsMenu	// 44 words
	.export _loadArtistsMenu
_loadArtistsMenu:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6)+1 ; sty I0,(I6)
	ldc 2,A0	// 2 -> 1 -> ET0
	ldc _filehandle,I0	// ET2
// 	drawCommonMenuItems("ARTISTS MENU",(2));
	stx A0,(I6)+1	// ET0
	ldc artistsme_14,A0	// ET1
	call _drawCommonMenuItems
	stx A0,(I6)	// ET1
// jumped away
	ldx (I0),A0/*V*/ ; ldy (I6)-2,NULL	// I6 += -2
// 	if (filehandle)
	sub A0,NULL,A0	// 'filehandle' == (0) -> (0)
	nop
	jzs F3B5	// signed compare
	nop
// jumped away
// 	}
// 	{
//  vo_fclose(filehandle);
	call _vo_fclose
	mv A0,I0	// 'filehandle' -> I0
// jumped away
F3B5:
	ldc rb_15,A0	// ET4
	ldx (I6)+1,NULL	// I6 += 1
// 	filehandle = vo_fopen("S:LOOKUP/songs.txt", "rb");
	stx A0,(I6)+1	// ET4
	ldc slookups_16,A0	// ET5
	call _vo_fopen
	stx A0,(I6)	// ET5
// jumped away
	ldc _filehandle,I0	// ET2
	stx A0,(I0)/*V*/ ; ldy (I6)-1,NULL	// I6 += -2
	sub A0,NULL,A0	// ET6 == (0) -> (0)
// 	if (filehandle)
	ldc failedto_17,A0
	jzs F3B9	// signed compare
	nop
// jumped away
// 	}
// 	{
// 		drawMenuListOptions();
	call _drawMenuListOptions
	ldx (I6)-1,NULL
// jumped away
F3B1:
	ldy (I6),I0 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
	ldc failedto_17,A0	// ET7
	ldx (I6)+1,NULL	// I6 += 1
F3B9:
// 	}
// 	else
// 	{
//  vo_printf("failed to open file \n");
	call _vo_printf
	stx A0,(I6)	// ET7
// jumped away
	j F3B1
	ldx (I6)-1,NULL	// I6 += -1
// jumped away

//_____________________________________________________________
//
	.sect code,loadPlaylistsMenu	// 44 words
	.export _loadPlaylistsMenu
_loadPlaylistsMenu:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6)+1 ; sty I0,(I6)
	ldc 3,A0	// 3 -> 1 -> ET0
	ldc _filehandle,I0	// ET2
// 	drawCommonMenuItems("PLAYLIST MENU",(3));
	stx A0,(I6)+1	// ET0
	ldc playlistm_18,A0	// ET1
	call _drawCommonMenuItems
	stx A0,(I6)	// ET1
// jumped away
	ldx (I0),A0/*V*/ ; ldy (I6)-2,NULL	// I6 += -2
// 	if (filehandle)
	sub A0,NULL,A0	// 'filehandle' == (0) -> (0)
	nop
	jzs F4B5	// signed compare
	nop
// jumped away
// 	}
// 	{
//  vo_fclose(filehandle);
	call _vo_fclose
	mv A0,I0	// 'filehandle' -> I0
// jumped away
F4B5:
	ldc rb_15,A0	// ET4
	ldx (I6)+1,NULL	// I6 += 1
// 	filehandle = vo_fopen("S:LOOKUP/songs.txt", "rb");
	stx A0,(I6)+1	// ET4
	ldc slookups_16,A0	// ET5
	call _vo_fopen
	stx A0,(I6)	// ET5
// jumped away
	ldc _filehandle,I0	// ET2
	stx A0,(I0)/*V*/ ; ldy (I6)-1,NULL	// I6 += -2
	sub A0,NULL,A0	// ET6 == (0) -> (0)
// 	if (filehandle)
	ldc failedto_17,A0
	jzs F4B9	// signed compare
	nop
// jumped away
// 	}
// 	{
// 		drawMenuListOptions();
	call _drawMenuListOptions
	ldx (I6)-1,NULL
// jumped away
F4B1:
	ldy (I6),I0 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
	ldc failedto_17,A0	// ET7
	ldx (I6)+1,NULL	// I6 += 1
F4B9:
// 	}
// 	else
// 	{
//  vo_printf("failed to open file \n");
	call _vo_printf
	stx A0,(I6)	// ET7
// jumped away
	j F4B1
	ldx (I6)-1,NULL	// I6 += -1
// jumped away

//_____________________________________________________________
//
	.sect code,loadSongsMenu	// 44 words
	.export _loadSongsMenu
_loadSongsMenu:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6)+1 ; sty I0,(I6)
	ldc 4,A0	// 4 -> 1 -> ET0
	ldc _filehandle,I0	// ET2
// 	drawCommonMenuItems("SONGS MENU",(4));
	stx A0,(I6)+1	// ET0
	ldc songsmenu_19,A0	// ET1
	call _drawCommonMenuItems
	stx A0,(I6)	// ET1
// jumped away
	ldx (I0),A0/*V*/ ; ldy (I6)-2,NULL	// I6 += -2
// 	if (filehandle)
	sub A0,NULL,A0	// 'filehandle' == (0) -> (0)
	nop
	jzs F5B5	// signed compare
	nop
// jumped away
// 	}
// 	{
//  vo_fclose(filehandle);
	call _vo_fclose
	mv A0,I0	// 'filehandle' -> I0
// jumped away
F5B5:
	ldc rb_15,A0	// ET4
	ldx (I6)+1,NULL	// I6 += 1
// 	filehandle = vo_fopen("S:LOOKUP/songs.txt", "rb");
	stx A0,(I6)+1	// ET4
	ldc slookups_16,A0	// ET5
	call _vo_fopen
	stx A0,(I6)	// ET5
// jumped away
	ldc _filehandle,I0	// ET2
	stx A0,(I0)/*V*/ ; ldy (I6)-1,NULL	// I6 += -2
	sub A0,NULL,A0	// ET6 == (0) -> (0)
// 	if (filehandle)
	ldc failedto_17,A0
	jzs F5B9	// signed compare
	nop
// jumped away
// 	}
// 	{
// 		drawMenuListOptions();
	call _drawMenuListOptions
	ldx (I6)-1,NULL
// jumped away
F5B1:
	ldy (I6),I0 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
	ldc failedto_17,A0	// ET7
	ldx (I6)+1,NULL	// I6 += 1
F5B9:
// 	}
// 	else
// 	{
//  vo_printf("failed to open file \n");
	call _vo_printf
	stx A0,(I6)	// ET7
// jumped away
	j F5B1
	ldx (I6)-1,NULL	// I6 += -1
// jumped away

//_____________________________________________________________
//
	.sect code,loadScanningMenu	// 31 words
	.export _loadScanningMenu
_loadScanningMenu:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty I0,(I6)+1
	stx I2,(I6)+1 ; sub NULL,ONES,A0
// 	LcdInit(1);
	call _LcdInit
	stx A0,(I6)	// ET0
// jumped away
	ldc 63488,A0	// 63488 -> 1 -> ET2
	ldc _lcd0+4,I0	// ET5
	stx A0,(I0)	// I6 += 1
// 	lcd0.textColor =((u_int16)((((255)>>3)<<11)|((((0)>>2)&0x3f)<<5)|(((0)>>3)&0x1f)));
// 	LcdTextOutXY(10, 100, "Scanning disk for songs...");
	ldc scanningd_20,A0	// ET6
	stx A0,(I6)+1	// ET6
	ldc 100,A0	// 100 -> 1 -> ET7
	stx A0,(I6)+1	// ET7
	ldc 10,A0	// 10 -> 1 -> ET8
	call _LcdTextOutXY
	stx A0,(I6)	// ET8
// jumped away
	ldc _lcd0+6,I2	// ETb
	ldx (I2),A0 ; ldy (I6)-3,NULL	// I6 += -3
// 	lcd0.textColor = lcd0.defaultTextColor;
	stx A0,(I0)	// ETc ==> ET5
// 	currentMenu =(6);
	ldc 6,A0	// 6 -> 1 -> ETa
	ldc _currentMenu,I0	// ETd
	stx A0,(I0)/*V*/	// ETa ==> ETd
	ldx (I6)-1,I2
	ldy (I6),I0 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,loadCriticalErrorMenu	// 46 words
	.export _loadCriticalErrorMenu
_loadCriticalErrorMenu:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	sty I2,(I6) ; sub NULL,ONES,A0	// 1 -> 1 -> ET0
	stx I0,(I6)+1
// 	LcdInit(1);
	call _LcdInit
	stx A0,(I6)	// ET0
// jumped away
	ldc 63488,A0	// 63488 -> 1 -> ET2
	ldc _lcd0+4,I0	// ET5
	ldc 10,A1	// 10 -> 1 -> ET8
	stx A0,(I0)	// I6 += 1
// 	lcd0.textColor =((u_int16)((((255)>>3)<<11)|((((0)>>2)&0x3f)<<5)|(((0)>>3)&0x1f)));
// 	LcdTextOutXY(10, 20, "A critical error has occured!");
	ldc acritical_21,A0	// ET6
	stx A0,(I6)+1	// ET6
	ldc 20,A0	// 20 -> 1 -> ET7
	stx A0,(I6)+1	// ET7
	call _LcdTextOutXY
	stx A1,(I6)	// ET8
// jumped away
	ldc pleasetry_22,A0	// ETa
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(10, 40, "Please try restarting the system");
	stx A0,(I6)+1	// ETa
	ldc 40,A0	// 40 -> 1 -> ETb
	stx A0,(I6)+1	// ETb
	call _LcdTextOutXY
	stx A1,(I6)	// ET8
// jumped away
	ldc iftheerr_23,A0	// ETd
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(10, 60, "If the error persists, contact UML");
	stx A0,(I6)+1	// ETd
	ldc 60,A0	// 60 -> 1 -> ETe
	stx A0,(I6)+1	// ETe
	call _LcdTextOutXY
	stx A1,(I6)	// ET8
// jumped away
	ldc _lcd0+6,I2	// ET11
	ldy (I6)-3,NULL ; ldx (I2),A0	// I6 += -3
// 	lcd0.textColor = lcd0.defaultTextColor;
	stx A0,(I0) ; ldy (I6),I2	// ET12 ==> ET5
// 	currentMenu =(7);
	ldc 7,A0	// 7 -> 1 -> ET13
	ldc _currentMenu,I0	// ET14
	stx A0,(I0)/*V*/	// ET13 ==> ET14
	ldx (I6)-1,I0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,loadInfoMenu	// 50 words
	.export _loadInfoMenu
_loadInfoMenu:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	ldc 10,A1	// 10 -> 1 -> ET6
	ldc 5,A0	// 5 -> 1 -> ET0
	stx B0,(I6) ; sty I0,(I6)+1
	ldc _metadata,I0	// ET3
	stx I1,(I6)+1 ; sty I2,(I6)
// 	drawCommonMenuItems("INFO MENU",(5));
	stx A0,(I6)+1	// ET0
	ldc infomenu_24,A0	// ET1
	call _drawCommonMenuItems
	stx A0,(I6)	// ET1
// jumped away
	ldc 100,A0	// 100 -> 1 -> ET5
	ldx (I0),I2/*V*/ ; ldy (I6)-1,NULL	// I6 += 1
// 	LcdTextOutXY(10, 100, metadata->title);
	ldx (I2)+1,NULL	// ET4 += 1
	stx I2,(I6)+1	// ET4
	stx A0,(I6)+1	// ET5
	call _LcdTextOutXY
	stx A1,(I6)	// ET6
// jumped away
	ldc 32,B0	// 32 -> 1 -> ET8
	ldx (I0),A0/*V*/ ; ldy (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(10, 130, metadata->artist);
	add A0,B0,A0	// 'metadata' + ET8 -> ET9
	stx A0,(I6)+1	// ET9
	ldc 130,A0	// 130 -> 1 -> ETa
	stx A0,(I6)+1	// ETa
	call _LcdTextOutXY
	stx A1,(I6)	// ET6
// jumped away
	ldc 63,B0	// 63 -> 1 -> ETc
	ldx (I0),A0/*V*/ ; ldy (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(10, 160, metadata->album);
	add A0,B0,A0	// 'metadata' + ETc -> ETd
	stx A0,(I6)+1	// ETd
	ldc 160,A0	// 160 -> 1 -> ETe
	stx A0,(I6)+1	// ETe
	call _LcdTextOutXY
	stx A1,(I6)	// ET6
// jumped away
	ldx (I0),I2/*V*/ ; ldy (I6)-3,NULL	// I6 += -3
// 	strcpy(currentTitle, metadata->title);
	ldc _currentTitle,I0	// I0
	ldx (I2)+1,NULL	// ET4 += 1
	call _strcpy
	mv I2,I1	// ET4 -> I1
// jumped away
	ldy (I6),I2 ; ldx (I6)-1,I1
	ldy (I6),I0 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,moveBoxSelection	// 171 words
	.export _moveBoxSelection
_moveBoxSelection:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	ldc String_25,A0	// ET0
	stx B0,(I6) ; sty B1,(I6)+1
	ldc 30,B0	// 30 -> 0 -> ET1
	ldc 10,B1	// 10 -> 1 -> ET6
	stx C0,(I6) ; sty C1,(I6)+1
	stx I0,(I6)+1 ; sty I2,(I6)
	ldc _arrowSelection,I0	// ET2
// (10, 30 + (arrowSelection * 30),  "                                ");
	stx A0,(I6)+1	// ET0
	ldx (I0),A0/*V*/	// ET2 ==> 'arrowSelection'
	mulss A0,B0	// 'arrowSelection' * ET1 -> P
	add NULL,P,A	// P -> AT31
	add B0,A0,A0	// ET1 + ET3 -> ET4
	stx A0,(I6)+1	// ET4
	call _LcdTextOutXY
	stx B1,(I6)	// ET6
// jumped away
	ldc String_26,A0	// ET8
	ldc 40,A1	// 40 -> 0 -> ET9
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(7, 40 + (arrowSelection * 30),  " ");
	stx A0,(I6)+1	// ET8
	ldx (I0),A0/*V*/	// ET2 ==> 'arrowSelection'
	mulss A0,B0	// 'arrowSelection' * ET1 -> P
	add NULL,P,C	// P -> AT33
	add A1,C0,A0	// ET9 + ET3 -> ETa
	stx A0,(I6)+1	// ETa
	ldc 7,A0	// 7 -> 1 -> ETc
	call _LcdTextOutXY
	stx A0,(I6)	// ETc
// jumped away
	ldc String_26,A0	// ET8
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(230, 40 + (arrowSelection * 30),  " ");
	stx A0,(I6)+1	// ET8
	ldx (I0),A0/*V*/	// ET2 ==> 'arrowSelection'
	mulss A0,B0	// 'arrowSelection' * ET1 -> P
	add NULL,P,C	// P -> AT35
	add A1,C0,A0	// ET9 + ET3 -> ETb
	stx A0,(I6)+1	// ETb
	ldc 230,A0	// 230 -> 1 -> ETe
	call _LcdTextOutXY
	stx A0,(I6)	// ETe
// jumped away
	ldc String_25,A0	// ET0
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(10, 50 + (arrowSelection * 30),  "                                ");
	stx A0,(I6)+1	// ET0
	ldx (I0),A0/*V*/	// ET2 ==> 'arrowSelection'
	mulss A0,B0	// 'arrowSelection' * ET1 -> P
	add NULL,P,A	// P -> AT37
	ldc 50,A1	// 50 -> 0 -> ET10
	add A1,A0,A0	// ET10 + ET3 -> ET11
	stx A0,(I6)+1	// ET11
	call _LcdTextOutXY
	stx B1,(I6)	// ET6
// jumped away
	ldx (I4)-2,NULL ; ldy (I6)-3,NULL	// I4 += -2
// 	if (direction ==(1))
	ldx (I4)+2,A0 ; sub NULL,ONES,A1	// 1 -> 1 -> ET14
	sub A0,A1,A1	// 'direction' == ET14 -> AT38
	nop
	jzs F9B7	// unsigned compare
	nop
// jumped away
// 	}
// 	else
// 	{
// 		if (arrowSelection != endOfFile)
	ldc _endOfFile,I2	// ET1f
	ldc _arrowSelection,I0	// ET2
	ldx (I0),A1/*V*/	// ET2 ==> 'arrowSelection'
	ldx (I2),A0/*V*/	// ET1f ==> 'endOfFile'
	sub A1,A0,B0	// 'arrowSelection' == 'endOfFile' -> AT3a
	ldc 8,A0	// 8 -> 0 -> ET1b
	jzs F9B9	// signed compare
	sub A1,A0,A1	// 'arrowSelection' != ET1b -> AT3f
// jumped away
// 		}
// 		{
// 			if (arrowSelection == 8)
	nop
	jzc F9B21	// signed compare
	nop
// jumped away
// 			}
// 			{
// 				pageNum++;
	ldc _pageNum,I2	// ET17
	ldx (I2),A0/*V*/	// ET17 ==> 'pageNum'
	sub A0,ONES,A0	// 'pageNum' - (-1) -> ET20
	stx A0,(I2)/*V*/ ; and NULL,NULL,A0	// ET20 ==> ET17
// 				arrowSelection = 0;
// 				drawMenuListOptions();
	call _drawMenuListOptions
	stx A0,(I0)/*V*/	// ET15 ==> ET2
// jumped away
F9B9:
	ldc 10,B1	// 10 -> 1 -> ET6
	ldc 30,B0	// 30 -> 0 -> ET1
	ldc _arrowSelection,I2	// ET2
	ldc 65504,A0	// 65504 -> 1 -> ET23
	ldc _lcd0+4,I0	// ET26
	ldy (I6)+1,NULL ; stx A0,(I0)	// I6 += 1
// 	lcd0.textColor =((u_int16)((((255)>>3)<<11)|((((255)>>2)&0x3f)<<5)|(((0)>>3)&0x1f)));
// 	LcdTextOutXY(10, 30 + (arrowSelection * 30),  "--------------------------------");
	ldc String_10,A0	// ET27
	stx A0,(I6)+1	// ET27
	ldx (I2),A0/*V*/	// ET2 ==> 'arrowSelection'
	mulss A0,B0	// 'arrowSelection' * ET1 -> P
	add NULL,P,A	// P -> AT3c
	add B0,A0,A0	// ET1 + ET3 -> ET5
	stx A0,(I6)+1	// ET5
	call _LcdTextOutXY
	stx B1,(I6)	// ET6
// jumped away
	ldc String_11,A0	// ET29
	ldc 40,A1	// 40 -> 0 -> ET9
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(7, 40 + (arrowSelection * 30),  "|");
	stx A0,(I6)+1	// ET29
	ldx (I2),A0/*V*/	// ET2 ==> 'arrowSelection'
	mulss A0,B0	// 'arrowSelection' * ET1 -> P
	add NULL,P,C	// P -> AT41
	add A1,C0,A0	// ET9 + ET3 -> ETb
	stx A0,(I6)+1	// ETb
	ldc 7,A0	// 7 -> 1 -> ETc
	call _LcdTextOutXY
	stx A0,(I6)	// ETc
// jumped away
	ldc String_11,A0	// ET29
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(230, 40 + (arrowSelection * 30),  "|");
	stx A0,(I6)+1	// ET29
	ldx (I2),A0/*V*/	// ET2 ==> 'arrowSelection'
	mulss A0,B0	// 'arrowSelection' * ET1 -> P
	add NULL,P,C	// P -> AT43
	add A1,C0,A0	// ET9 + ET3 -> ETb
	stx A0,(I6)+1	// ETb
	ldc 230,A0	// 230 -> 1 -> ETe
	call _LcdTextOutXY
	stx A0,(I6)	// ETe
// jumped away
	ldc String_10,A0	// ET27
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(10, 50 + (arrowSelection * 30),  "--------------------------------");
	stx A0,(I6)+1	// ET27
	ldx (I2),A0/*V*/	// ET2 ==> 'arrowSelection'
	mulss A0,B0	// 'arrowSelection' * ET1 -> P
	ldc 50,A0	// 50 -> 0 -> ET10
	add NULL,P,C	// P -> AT45
	add A0,C0,A0	// ET10 + ET3 -> ET12
	stx A0,(I6)+1	// ET12
	call _LcdTextOutXY
	stx B1,(I6)	// ET6
// jumped away
	ldc _lcd0+6,I2	// ET2e
	ldy (I6)-3,NULL ; ldx (I2),A0	// I6 += -3
// 	lcd0.textColor = lcd0.defaultTextColor;
	stx A0,(I0) ; ldy (I6),I2	// ET2f ==> ET26
	ldx (I6)-1,I0
	ldy (I6),C1 ; ldx (I6)-1,C0
	ldy (I6),B1 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F9B21:
// 			}
// 			else
// 			{
// 				arrowSelection++;
	ldc _arrowSelection,I0	// ET2
	ldx (I0),A0/*V*/	// ET2 ==> 'arrowSelection'
	sub A0,ONES,A0	// 'arrowSelection' - (-1) -> ET22
	j F9B9
	stx A0,(I0)/*V*/	// ET22 ==> ET2
// jumped away
F9B7:
// 	}
// 	{
// 		if (arrowSelection == 0)
	ldx (I0),A0/*V*/	// ET2 ==> 'arrowSelection'
	sub A0,NULL,A0	// 'arrowSelection' != (0) -> (0)
	ldc _arrowSelection,I0	// ET2
	jzc F9B11	// signed compare
	nop
// jumped away
// 		}
// 		{
// 			if (!pageNum == 0)
	ldc _pageNum,I0	// ET17
	ldx (I0),A0/*V*/ ; and NULL,NULL,A1	// ET17 ==> 'pageNum'
	sub A0,NULL,A0	// 'pageNum' != (0) -> (0)
	nop
	jzc F9B16	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A1	// 1 -> AT16
F9B16:
	sub A1,NULL,A1	// AT16 != (0) -> (0)
	ldc _pageNum,I0	// ET17
	jzc F9B9	// signed compare
	nop
// jumped away
// 			}
// 			{
// 				pageNum--;
	ldx (I0),A0/*V*/	// ET17 ==> 'pageNum'
	add A0,ONES,A0	// 'pageNum' + (-1) -> ET1a
	stx A0,(I0)/*V*/	// ET1a ==> ET17
// 				arrowSelection = 8;
	ldc 8,A0	// 8 -> 0 -> ET1b
	ldc _arrowSelection,I0	// ET2
// 				drawMenuListOptions();
	stx A0,(I0)/*V*/	// ET1b ==> ET2
	call _drawMenuListOptions
	ldc F9B9,LR0
// jumped away
F9B11:
// 		}
// 		else
// 		{
// 			arrowSelection--;
	ldx (I0),A0/*V*/	// ET2 ==> 'arrowSelection'
	add A0,ONES,A0	// 'arrowSelection' + (-1) -> ET1e
	j F9B9
	stx A0,(I0)/*V*/	// ET1e ==> ET2
// jumped away

//_____________________________________________________________
//
	.sect code,retrieveSongLocation	// 100 words
	.export _retrieveSongLocation
_retrieveSongLocation:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C0,(I6)+1
	ldc 128,B1	// 128 -> 0 -> ET5
	ldc _buffer,C0	// ET6
	stx C1,(I6) ; sty D0,(I6)+1
	stx D1,(I6) ; sty I0,(I6)+1
	ldc _filehandle,I0	// ET4
	stx I1,(I6) ; sty I2,(I6)
	ldc _arrowSelection,I1	// ET1
// (i = 0; i < arrowSelection + offset; i++)
	ldx (I4)-2,NULL ; and NULL,NULL,A1	// 0 -> 'i'
	ldx (I4)-1,I2 ; and D,NULL,D	// 0 -> 2 -> ET9
	j F10B6
	ldx (I4)+3,B0 ; and NULL,NULL,C1	// 0 -> 0 -> ET8
// jumped away
F10B3:	// (loop lvl 2)
	ldy (I6)+1,NULL ; ldx (I0),A0/*V*/	// I6 += 1
// 	}
// 	{
// 	    if (! vo_fgets(buffer, sizeof(buffer), filehandle))
	stx A0,(I6)+1	// 'filehandle'
	stx B1,(I6)+1	// ET5
	call _vo_fgets
	stx C0,(I6)	// ET6
// jumped away
	ldx (I6)-2,NULL ; sub A0,NULL,A0	// I6 += -3
	nop	// I6 += 1
	jzc F10B8	// signed compare
	nop
// jumped away
// 		 }
// 	    {
//  vo_fseek(filehandle, 0,0);
	stx C1,(I6)+1	// ET8
	stx D0,(I6)+1	// D0
	stx D1,(I6)+1	// D1
	ldx (I0),A0/*V*/	// ET4 ==> 'filehandle'
	call _vo_fseek
	stx A0,(I6)	// 'filehandle'
// jumped away
	ldy (I6)-3,NULL ; ldx (I0),A0/*V*/	// I6 += 1
//  vo_fgets(buffer, sizeof(buffer), filehandle);
	stx A0,(I6)+1	// 'filehandle'
	stx B1,(I6)+1	// ET5
	call _vo_fgets
	stx C0,(I6)	// ET6
// jumped away
	ldx (I6)-2,NULL	// I6 += -3
F10B8:	// (loop lvl 2)
	ldx (I6)-1,NULL ; sub A1,ONES,A1
F10B6:	// (loop lvl 2)
	ldx (I1),A0/*V*/	// ET1 ==> ET2
	add A0,B0,A0	// ET2 + 'offset' -> ET3
	sub A1,A0,A0	// 'i' < ET3 -> AT1b
	nop
	jcc F10B3	// unsigned compare
	nop
// jumped away
	ldc _filehandle,I0	// ET4
	ldy (I6)+1,NULL ; ldx (I0),A0/*V*/	// I6 += 1
//  vo_fgets(buffer, sizeof(buffer), filehandle);
	stx A0,(I6)+1	// 'filehandle'
	ldc 128,A0	// 128 -> 0 -> ET5
	stx A0,(I6)+1	// ET5
	ldc _buffer,A0	// ET6
	call _vo_fgets
	stx A0,(I6)	// ET6
// jumped away
	ldc _topOfList,I1	// ET10
	ldx (I6)-2,NULL ; and NULL,NULL,A0	// I6 += 1
//  vo_fseek(filehandle, topOfList,0);
	stx A0,(I6)+1	// ET8
	ldx (I1)+1,A0/*V*/
	ldx (I1)-1,A1/*V*/
	stx A0,(I6)+1	// A0
	stx A1,(I6)+1	// A1
	ldx (I0),A0/*V*/	// ET4 ==> 'filehandle'
	call _vo_fseek
	stx A0,(I6)	// 'filehandle'
// jumped away
	ldc String_11,I1	// I1
	ldc _buffer,I0	// I0
// 	strtok(buffer, "|");
	call _strtok
	ldx (I6)-4,NULL	// I6 += -4
// jumped away
// 	charIndex = strtok(0, "|");
	ldc String_11,I1	// I1
	call _strtok
	ldc 0,I0	// 0 -> I0
// jumped away
	ldx (I6)+1,NULL	// I6 += 1
// 	*index = atoi(charIndex);
	call _atoi
	stx I0,(I6)	// 'charIndex'
// jumped away
	ldc _running,I0	// ET18
	stx A0,(I2) ; ldy (I6)-1,NULL	// I6 += -1
// 	if (running)
	ldx (I0),A0/*V*/	// ET18 ==> 'running'
	sub A0,NULL,A0	// 'running' == (0) -> (0)
	nop
	jzs F10B19	// unsigned compare
	sub NULL,ONES,A0
// jumped away
// 	}
// 	{
// 		newSongSelected = 1;
	ldc _newSongSelected,I0	// ET19
	sub NULL,ONES,A0	// 1 -> 1 -> ETd
F10B19:
	ldc String_11,I1	// I1
	stx A0,(I0)/*V*/	// ETd ==> ET19
// 	return strtok(0, "|");
	call _strtok
	ldc 0,I0	// 0 -> I0
// jumped away
	mv I0,A0	// ET1a returns via A0
	ldy (I6),I2 ; ldx (I6)-1,I1
	ldy (I6),I0 ; ldx (I6)-1,D1
	ldy (I6),D0 ; ldx (I6)-1,C1
	ldy (I6),C0 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
// 	}
// 	else
// 	{
// 		running = 1;
	ldc _running,I0	// ET18
	j F10B19
	sub NULL,ONES,A0	// 1 -> 1 -> ETd
// jumped away

//_____________________________________________________________
//
	.sect code,loadNoDriveMenu	// 59 words
	.export _loadNoDriveMenu
_loadNoDriveMenu:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	sty I2,(I6) ; sub NULL,ONES,A1	// 1 -> 1 -> ET0
	stx I0,(I6)+1
// 	LcdInit(1);
	call _LcdInit
	stx A1,(I6)	// ET0
// jumped away
	ldc 63488,A0	// 63488 -> 1 -> ET2
	ldc _lcd0+4,I0	// ET5
	stx A0,(I0)	// I6 += 1
// 	lcd0.textColor =((u_int16)((((255)>>3)<<11)|((((0)>>2)&0x3f)<<5)|(((0)>>3)&0x1f)));
// 	LcdTextOutXY(1, 70, "No Drive Detected!");
	ldc nodrived_27,A0	// ET6
	stx A0,(I6)+1	// ET6
	ldc 70,A0	// 70 -> 1 -> ET7
	stx A0,(I6)+1	// ET7
	call _LcdTextOutXY
	stx A1,(I6)	// ET0
// jumped away
	ldc pleasetry_22,A0	// ET9
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(1, 90, "Please try restarting the system");
	stx A0,(I6)+1	// ET9
	ldc 90,A0	// 90 -> 1 -> ETa
	stx A0,(I6)+1	// ETa
	call _LcdTextOutXY
	stx A1,(I6)	// ET0
// jumped away
	ldc makesure_28,A0	// ETc
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(1, 110, "Make sure the drive is plugged in");
	stx A0,(I6)+1	// ETc
	ldc 110,A0	// 110 -> 1 -> ETd
	stx A0,(I6)+1	// ETd
	call _LcdTextOutXY
	stx A1,(I6)	// ET0
// jumped away
	ldc andisfor_29,A0	// ETf
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(1, 130, "and is formatted as FAT");
	stx A0,(I6)+1	// ETf
	ldc 130,A0	// 130 -> 1 -> ET10
	stx A0,(I6)+1	// ET10
	call _LcdTextOutXY
	stx A1,(I6)	// ET0
// jumped away
	ldc iftheerr_23,A0	// ET12
	ldx (I6)-2,NULL	// I6 += 1
// 	LcdTextOutXY(1, 150, "If the error persists, contact UML");
	stx A0,(I6)+1	// ET12
	ldc 150,A0	// 150 -> 1 -> ET13
	stx A0,(I6)+1	// ET13
	call _LcdTextOutXY
	stx A1,(I6)	// ET0
// jumped away
	ldc _lcd0+6,I2	// ET16
	ldy (I6)-3,NULL ; ldx (I2),A0	// I6 += -3
// 	lcd0.textColor = lcd0.defaultTextColor;
	stx A0,(I0) ; ldy (I6),I2	// ET17 ==> ET5
// 	currentMenu =(7);
	ldc 7,A0	// 7 -> 1 -> ET18
	ldc _currentMenu,I0	// ET19
	stx A0,(I0)/*V*/	// ET18 ==> ET19
	ldx (I6)-1,I0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,navigateMenus	// 442 words
	.export _navigateMenus
_navigateMenus:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	ldc 4,A1	// 4 -> 1 -> ET3
	stx B1,(I6) ; sty C0,(I6)+1
	stx C1,(I6) ; sty I0,(I6)+1
	ldc _currentMenu,I0	// ET1
	stx I2,(I6)
// 	switch (currentMenu)
	ldx (I0),A0/*V*/	// ET1 ==> 'currentMenu'
	add A0,ONES,A0	// 'currentMenu' + (-1) -> ET2
	sub A1,A0,A1	// ET3 > ET2 -> AT48
	ldc JumpTable_30,A1	// ET4
	jcc F12B3	// unsigned compare
	add A0,A1,A0	// ET2 + ET4 -> AT73
// jumped away
	mv A0,I0	// AT73 -> ET5
	ldx (I0),A0	// ET5 ==> ET6
	mv A0,LR0
	jr
	nop
// jumped away
F12B4:
// 			if ((GpioReadPinDelay(((0x1A)),15,0)))
	ldc 15,B0	// 15 -> B0
	ldc 26,C0	// 26 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ETa == (0) -> (0)
	ldc 15,B0
	jzs F12B12	// unsigned compare
	ldc 27,C0
// jumped away
// 			}
// 			{
// 				loadPlaylistsMenu();
	call _loadPlaylistsMenu
	ldc _anyButtonPressed,I0	// ETb
// jumped away
// 				anyButtonPressed = 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET0
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1A)),15,0)))
F12B19:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 26,C0	// 26 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ETd != (0) -> (0)
	nop
	jzc F12B19	// unsigned compare
	nop
// jumped away
	ldc button10_31,A0	// ETe
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON10 \n");
	call _vo_printf
	stx A0,(I6)	// ETe
// jumped away
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// 				return 1;
F12B1:
	ldx (I6)-1,I2
	ldy (I6),I0 ; ldx (I6)-1,C1
	ldy (I6),C0 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
// 			else if ((GpioReadPinDelay(((0x1B)),15,0)))
	ldc 15,B0	// 15 -> B0
	ldc 27,C0	// 27 -> C0
F12B12:
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET11 == (0) -> (0)
	ldc 15,B0	// 15 -> B0
	jzs F12B23	// unsigned compare
	ldc 28,C0	// 28 -> C0
// jumped away
// 			}
// 			{
// 				loadSongsMenu();
	call _loadSongsMenu
	ldc _anyButtonPressed,I0	// ETb
// jumped away
// 				anyButtonPressed = 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET0
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1B)),15,0)))
F12B30:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 27,C0	// 27 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET12 != (0) -> (0)
	nop
	jzc F12B30	// unsigned compare
	nop
// jumped away
	ldc button11_32,A0	// ET13
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON11 \n");
	call _vo_printf
	stx A0,(I6)	// ET13
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B23:
// 			else if ((GpioReadPinDelay(((0x1C)),15,0)))
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET16 == (0) -> (0)
	ldc 15,B0	// 15 -> B0
	jzs F12B34	// unsigned compare
	ldc 29,C0	// 29 -> C0
// jumped away
// 			}
// 			{
// 				loadArtistsMenu();
	call _loadArtistsMenu
	ldc _anyButtonPressed,I0	// ETb
// jumped away
// 				anyButtonPressed = 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET0
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1C)),15,0)))
F12B41:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 28,C0	// 28 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET17 != (0) -> (0)
	nop
	jzc F12B41	// unsigned compare
	nop
// jumped away
	ldc button12_33,A0	// ET18
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON12 \n");
	call _vo_printf
	stx A0,(I6)	// ET18
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B34:
// 			else if ((GpioReadPinDelay(((0x1D)),15,0)))
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET1b == (0) -> (0)
	nop
	jzs F12B3	// unsigned compare
	nop
// jumped away
// 			}
// 			{
// 				loadInfoMenu();
	call _loadInfoMenu
	ldc _anyButtonPressed,I0	// ETb
// jumped away
// 				anyButtonPressed = 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET0
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1D)),15,0)))
F12B51:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 29,C0	// 29 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET1c != (0) -> (0)
	nop
	jzc F12B51	// unsigned compare
	nop
// jumped away
	ldc button13_34,A0	// ET1d
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON13 \n");
	call _vo_printf
	stx A0,(I6)	// ET1d
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B3:
// 	return 0;
	j F12B1
	and NULL,NULL,A0	// 0 -> 1 -> ET7
// jumped away
F12B5:
// 			if (lastTimeSeconds != audioDecoder->cs.playTimeSeconds)
	ldc _audioDecoder,I2	// ET22
	ldc _lastTimeSeconds,I0	// ET1f
	ldx (I0),A0/*V*/ ; and A1,NULL,A1	// ET1f ==> 'lastTimeSeconds'
	ldx (I2),I2/*V*/
	ldx (I2)+7,NULL	// ET23 += 14
	ldx (I2)+7,NULL	// ...
	ldx (I2)+1,B0/*V*/
	ldx (I2)-1,B1/*V*/
	mv B1,B1	// update guard bits (cmp)
// (A2 already up to date)
	sub A,B,A	// ET20 == ET24 -> AT4a
	ldc 15,B0
	jzs F12B55	// signed compare
	ldc 28,C0
// jumped away
// 			}
// 			{
// 				lastTimeSeconds = audioDecoder->cs.playTimeSeconds;
	ldx (I2)+1,A0/*V*/
	ldx (I2)-1,A1/*V*/
	ldc 5940,A1	// 5940 -> 1 -> ET27
	stx A0,(I0)/*V*/	// ET26 ==> ET1f
// 				if (lastTimeSeconds < 99*60)
// 			if ((GpioReadPinDelay(((0x1C)),15,0)))
F12B55:
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET28 == (0) -> (0)
	nop
	jzs F12B3	// unsigned compare
	nop
// jumped away
// 			}
// 			{
// 				loadMainMenu();
	call _loadMainMenu
	ldc _anyButtonPressed,I0	// ETb
// jumped away
// 				anyButtonPressed = 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET0
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1C)),15,0)))
F12B65:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 28,C0	// 28 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET29 != (0) -> (0)
	nop
	jzc F12B65	// unsigned compare
	nop
// jumped away
	ldc button12_33,A0	// ET18
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON12 \n");
	call _vo_printf
	stx A0,(I6)	// ET18
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B6:
// 			if ((GpioReadPinDelay(((0x1A)),15,0)))
	ldc 15,B0	// 15 -> B0
	ldc 26,C0	// 26 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET2b == (0) -> (0)
	ldc 15,B0	// 15 -> B0
	jzs F12B69	// unsigned compare
	ldc 27,C0	// 27 -> C0
// jumped away
	ldc _anyButtonPressed,I0	// ETb
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
// 			}
// 			{
// 				moveBoxSelection((0));
	call _moveBoxSelection
	stx A0,(I6)	// ET7
// jumped away
	sub NULL,ONES,A0 ; ldy (I6)-1,NULL	// I6 += -1
// 				anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1A)),15,0)))
F12B75:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 26,C0	// 26 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET2c != (0) -> (0)
	nop
	jzc F12B75	// unsigned compare
	nop
// jumped away
	ldc button10_31,A0	// ETe
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON10 \n");
	call _vo_printf
	stx A0,(I6)	// ETe
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B69:
// 			if ((GpioReadPinDelay(((0x1B)),15,0)))
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET2e == (0) -> (0)
	ldc 15,B0	// 15 -> B0
	jzs F12B79	// unsigned compare
	ldc 28,C0	// 28 -> C0
// jumped away
	ldc _anyButtonPressed,I0	// ETb
	ldx (I6)+1,NULL ; sub NULL,ONES,A0	// I6 += 1
// 			}
// 			{
// 				moveBoxSelection((1));
	call _moveBoxSelection
	stx A0,(I6)	// ET0
// jumped away
	sub NULL,ONES,A0 ; ldy (I6)-1,NULL	// I6 += -1
// 				anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1B)),15,0)))
F12B85:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 27,C0	// 27 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET2f != (0) -> (0)
	nop
	jzc F12B85	// unsigned compare
	nop
// jumped away
	ldc button11_32,A0	// ET13
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON11 \n");
	call _vo_printf
	stx A0,(I6)	// ET13
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B79:
// 			if ((GpioReadPinDelay(((0x1C)),15,0)))
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET31 == (0) -> (0)
	nop
	jzs F12B3	// unsigned compare
	nop
// jumped away
// 			}
// 			{
// 				loadMainMenu();
	call _loadMainMenu
	ldc _anyButtonPressed,I0	// ETb
// jumped away
// 				anyButtonPressed = 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET0
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1C)),15,0)))
F12B95:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 28,C0	// 28 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET32 != (0) -> (0)
	nop
	jzc F12B95	// unsigned compare
	nop
// jumped away
	ldc button12_33,A0	// ET18
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON12 \n");
	call _vo_printf
	stx A0,(I6)	// ET18
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B7:
// 			if ((GpioReadPinDelay(((0x1A)),15,0)))
	ldc 15,B0	// 15 -> B0
	ldc 26,C0	// 26 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET34 == (0) -> (0)
	ldc 15,B0	// 15 -> B0
	jzs F12B99	// unsigned compare
	ldc 27,C0	// 27 -> C0
// jumped away
	ldc _anyButtonPressed,I0	// ETb
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
// 			}
// 			{
// 				moveBoxSelection((0));
	call _moveBoxSelection
	stx A0,(I6)	// ET7
// jumped away
	sub NULL,ONES,A0 ; ldy (I6)-1,NULL	// I6 += -1
// 				anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1A)),15,0)))
F12B106:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 26,C0	// 26 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET35 != (0) -> (0)
	nop
	jzc F12B106	// unsigned compare
	nop
// jumped away
	ldc button10_31,A0	// ETe
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON10 \n");
	call _vo_printf
	stx A0,(I6)	// ETe
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B99:
// 			else if ((GpioReadPinDelay(((0x1B)),15,0)))
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET37 == (0) -> (0)
	ldc 15,B0	// 15 -> B0
	jzs F12B110	// unsigned compare
	ldc 28,C0	// 28 -> C0
// jumped away
	ldc _anyButtonPressed,I0	// ETb
	ldx (I6)+1,NULL ; sub NULL,ONES,A0	// I6 += 1
// 			}
// 			{
// 				moveBoxSelection((1));
	call _moveBoxSelection
	stx A0,(I6)	// ET0
// jumped away
	sub NULL,ONES,A0 ; ldy (I6)-1,NULL	// I6 += -1
// 				anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1B)),15,0)))
F12B117:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 27,C0	// 27 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET38 != (0) -> (0)
	nop
	jzc F12B117	// unsigned compare
	nop
// jumped away
	ldc button11_32,A0	// ET13
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON11 \n");
	call _vo_printf
	stx A0,(I6)	// ET13
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B110:
// 			else if ((GpioReadPinDelay(((0x1C)),15,0)))
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET3a == (0) -> (0)
	ldc 15,B0	// 15 -> B0
	jzs F12B121	// unsigned compare
	ldc 29,C0	// 29 -> C0
// jumped away
// 			}
// 			{
// 				loadMainMenu();
	call _loadMainMenu
	ldc _anyButtonPressed,I0	// ETb
// jumped away
// 				anyButtonPressed = 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET0
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1C)),15,0)))
F12B128:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 28,C0	// 28 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET3b != (0) -> (0)
	nop
	jzc F12B128	// unsigned compare
	nop
// jumped away
	ldc button12_33,A0	// ET18
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON12 \n");
	call _vo_printf
	stx A0,(I6)	// ET18
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B121:
// 			else if ((GpioReadPinDelay(((0x1D)),15,0)))
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET3d == (0) -> (0)
	ldc _path,I0	// ET40
	jzs F12B3	// unsigned compare
	nop
// jumped away
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
// 			}
// 			{
// 				path = retrieveSongLocation(&index, 0);
	stx A0,(I6)+1	// ET7
	ldc _index,A0	// ET3e
	call _retrieveSongLocation
	stx A0,(I6)	// ET3e
// jumped away
	stx A0,(I0)/*V*/ ; ldy (I6)-1,NULL	// I6 += 1
//  vo_printf("%s - %i \n", path, index);
	ldc _index,I0	// ET3e
	ldx (I0),A1/*V*/	// ET3e ==> 'index'
	stx A1,(I6)+1	// 'index'
	stx A0,(I6)+1	// ET3f
	ldc si_35,A0	// ET41
	call _vo_printf
	stx A0,(I6)	// ET41
// jumped away
	ldc _anyButtonPressed,I0	// ETb
	sub NULL,ONES,A0 ; ldy (I6)-3,NULL	// I6 += -3
// 				anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1D)),15,0)))
F12B139:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 29,C0	// 29 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET43 != (0) -> (0)
	nop
	jzc F12B139	// unsigned compare
	nop
// jumped away
	ldc button13_34,A0	// ET1d
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON13 \n");
	call _vo_printf
	stx A0,(I6)	// ET1d
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away
F12B8:
// 			if ((GpioReadPinDelay(((0x1C)),15,0)))
	ldc 15,B0	// 15 -> B0
	ldc 28,C0	// 28 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET45 == (0) -> (0)
	nop
	jzs F12B3	// unsigned compare
	nop
// jumped away
// 			}
// 			{
// 				loadMainMenu();
	call _loadMainMenu
	ldc _anyButtonPressed,I0	// ETb
// jumped away
// 				anyButtonPressed = 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET0
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET0 ==> ETb
// 				idleMode = 0;
	ldc _idleMode,I0	// ETc
	stx A0,(I0)/*V*/	// ET7 ==> ETc
// 				while ((GpioReadPinDelay(((0x1C)),15,0)))
F12B149:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 28,C0	// 28 -> C0
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET46 != (0) -> (0)
	nop
	jzc F12B149	// unsigned compare
	nop
// jumped away
	ldc button12_33,A0	// ET18
	ldx (I6)+1,NULL	// I6 += 1
//  vo_printf("BUTTON12 \n");
	call _vo_printf
	stx A0,(I6)	// ET18
// jumped away
// 				return 1;
	j F12B1
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// jumped away

//_____________________________________________________________
//
	.sect data_x,init_x	// 6 words
	.export _filehandle
_filehandle:
	.word 0
	.export _endOfFile
_endOfFile:
	.word -1
	.export _pageNum
_pageNum:
	.word 0
_lastTimeSeconds:
	.word 0
	.export _topOfList
_topOfList:
	.word lo(0), hi(0)

//_____________________________________________________________
//
	.sect data_x,bss_x	// 159 words
	.export _buffer
_buffer:
	.bss 128
_currentTitle:
	.bss 31

//_____________________________________________________________
//
	.sect data_x,const_x	// 537 words
mainmenu_1:
	.word "MAIN MENU"

	.zero 1
artists_2:
	.word "ARTISTS"

	.zero 1
playlists_3:
	.word "PLAYLISTS"

	.zero 1
songs_4:
	.word "SONGS"

	.zero 1
info_5:
	.word "INFO"

	.zero 1
back_6:
	.word "BACK"

	.zero 1
up_7:
	.word "UP"

	.zero 1
down_8:
	.word "DOWN"

	.zero 1
select_9:
	.word "SELECT"

	.zero 1
String_10:
	.word "--------------------------------"

	.zero 1
String_11:
	.word "|"

	.zero 1
String_12:
	.word "                              "

	.zero 1
topoflis_13:
	.word "Top of List buffer : %s"

	.zero 1
artistsme_14:
	.word "ARTISTS MENU"

	.zero 1
rb_15:
	.word "rb"

	.zero 1
slookups_16:
	.word "S:LOOKUP/songs.txt"

	.zero 1
failedto_17:
	.word "failed to open file \n"

	.zero 1
playlistm_18:
	.word "PLAYLIST MENU"

	.zero 1
songsmenu_19:
	.word "SONGS MENU"

	.zero 1
scanningd_20:
	.word "Scanning disk for songs..."

	.zero 1
acritical_21:
	.word "A critical error has occured!"

	.zero 1
pleasetry_22:
	.word "Please try restarting the system"

	.zero 1
iftheerr_23:
	.word "If the error persists, contact UML"

	.zero 1
infomenu_24:
	.word "INFO MENU"

	.zero 1
String_25:
	.word "                                "

	.zero 1
String_26:
	.word " "

	.zero 1
nodrived_27:
	.word "No Drive Detected!"

	.zero 1
makesure_28:
	.word "Make sure the drive is plugged in"

	.zero 1
andisfor_29:
	.word "and is formatted as FAT"

	.zero 1
JumpTable_30:
	.word F12B4, F12B6, F12B8, F12B7, F12B5
button10_31:
	.word "BUTTON10 \n"

	.zero 1
button11_32:
	.word "BUTTON11 \n"

	.zero 1
button12_33:
	.word "BUTTON12 \n"

	.zero 1
button13_34:
	.word "BUTTON13 \n"

	.zero 1
si_35:
	.word "%s - %i \n"

	.zero 1

	.end
