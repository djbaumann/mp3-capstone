
//_____________________________________________________________
//
	.sect code,nextSong	// 64 words
	.export _nextSong
_nextSong:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C1,(I6)+1
	sty I0,(I6) ; and NULL,NULL,B1	// 0 -> B1
	stx D0,(I6)+1 ; add C0,NULL,D0
// 	if (((GpioReadPinDelay((button),15,0)) & activeHigh) || ((GpioReadPinDelay((button),15,0)) & !activeHigh))
	and NULL,NULL,C1 ; ldx (I4)-2,NULL	// 0 -> C1
	call _GpioReadPinDelay
	ldc 15,B0	// 15 -> B0
// jumped away
	ldx (I4)+2,A1	// unspill 'activeHigh' from #-2
	and A0,A1,A0	// ET2 and 'activeHigh' -> ET3
	nop
	jzs F0B5	// compare against zero
	nop
// jumped away
	ldc nextsong_1,A0	// ET8
	ldx (I6)+1,NULL	// I6 += 1
F0B3:
// 	}
// 	{
//  vo_printf("Next song button pressed! \n");
	call _vo_printf
	stx A0,(I6)	// ET8
// jumped away
	ldc 15,B0	// 15 -> B0
	ldc _audioDecoder,I0	// ETc
	ldx (I0),I0/*V*/ ; ldy (I6)-1,NULL	// I6 += -1
// 		audioDecoder->cs.cancel = 1;
	ldx (I0)+7,NULL ; sub NULL,ONES,A0	// ETd += 13
	ldx (I0)+6,NULL ; sub NULL,ONES,A1	// ...
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ETa ==> ETd
// 		repeatSongStatus = 0;
	ldc _repeatSongStatus,I0	// ETe
	stx A0,(I0)/*V*/ ; and NULL,NULL,B1	// ET0 ==> ETe
// 		anyButtonPressed = 1;
	ldc _anyButtonPressed,I0	// ET10
	stx A1,(I0)/*V*/	// ETf ==> ET10
// 		idleMode = 0;
	ldc _idleMode,I0	// ET11
	stx A0,(I0)/*V*/	// ET0 ==> ET11
// 		while ((GpioReadPinDelay((button),15,0)))
F0B14:	// (loop lvl 2)
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET12 != (0) -> (0)
	ldc 15,B0
	jzc F0B14	// unsigned compare
	and NULL,NULL,B1
// jumped away
// 		return 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ETf
F0B1:
	ldy (I6),I0 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F0B5:
	ldc 15,B0	// 15 -> B0
	ldc 0,B1	// 0 -> B1
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	mv A0,B0 ; sub A1,NULL,A1	// A0 -> ET4
	ldc 0,A0	// 0 -> ET6
	jzc F0B9	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A0	// 1 -> ET6
F0B9:
	and B0,A0,A0 ; ldx (I6)+1,NULL	// ET4 and ET6 -> ET7
	ldc nextsong_1,A0
	jzc F0B3	// compare against zero
	nop
// jumped away
// 	return 0;
	j F0B1
	ldx (I6)-1,NULL ; and NULL,NULL,A0
// jumped away

//_____________________________________________________________
//
	.sect code,repeatSong	// 65 words
	.export _repeatSong
_repeatSong:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C1,(I6)+1
	sty I0,(I6) ; and NULL,NULL,B1	// 0 -> B1
	stx D0,(I6)+1 ; add C0,NULL,D0
// 	if (((GpioReadPinDelay((button),15,0)) & activeHigh) || ((GpioReadPinDelay((button),15,0)) & !activeHigh))
	and NULL,NULL,C1 ; ldx (I4)-2,NULL	// 0 -> C1
	call _GpioReadPinDelay
	ldc 15,B0	// 15 -> B0
// jumped away
	ldx (I4)+2,A1	// unspill 'activeHigh' from #-2
	and A0,A1,A0	// ET2 and 'activeHigh' -> ET3
	nop
	jzs F1B5	// compare against zero
	nop
// jumped away
// 	}
// 	{
// 		repeatSongStatus = !repeatSongStatus;
	ldc _repeatSongStatus,I0	// ET9
F1B3:
	ldx (I0),A0/*V*/ ; and NULL,NULL,A1	// ET9 ==> 'repeatSongStatus'
	sub A0,NULL,A0	// 'repeatSongStatus' != (0) -> (0)
	ldc repeat_2,A0
	jzc F1B11	// unsigned compare
	ldc _repeatSongStatus,I0
// jumped away
	sub NULL,ONES,A1	// 1 -> ETa
F1B11:
	ldy (I6)+1,NULL ; stx A1,(I0)/*V*/	// I6 += 1
//  vo_printf("Repeat - %i \n", repeatSongStatus);
	stx A1,(I6)+1	// ETa
	call _vo_printf
	stx A0,(I6)	// ETb
// jumped away
	ldc 15,B0	// 15 -> B0
	ldc _anyButtonPressed,I0	// ETe
	ldx (I6)-2,NULL ; sub NULL,ONES,A0	// I6 += -2
// 		anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ETd ==> ETe
// 		idleMode = 0;
	ldc _idleMode,I0	// ETf
	stx A0,(I0)/*V*/ ; and NULL,NULL,B1	// ET0 ==> ETf
// 		while ((GpioReadPinDelay((button),15,0)))
F1B16:	// (loop lvl 2)
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET10 != (0) -> (0)
	ldc 15,B0
	jzc F1B16	// unsigned compare
	and NULL,NULL,B1
// jumped away
// 		return 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ETd
F1B1:
	ldy (I6),I0 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F1B5:
	ldc 15,B0	// 15 -> B0
	ldc 0,B1	// 0 -> B1
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	mv A0,B0 ; sub A1,NULL,A1	// A0 -> ET4
	ldc 0,A0	// 0 -> ET6
	jzc F1B9	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A0	// 1 -> ET6
F1B9:
	and B0,A0,A0	// ET4 and ET6 -> ET7
	ldc _repeatSongStatus,I0
	jzc F1B3	// compare against zero
	nop
// jumped away
// 	return 0;
	j F1B1
	and NULL,NULL,A0	// 0 -> 1 -> ET0
// jumped away

//_____________________________________________________________
//
	.sect code,shuffleSong	// 81 words
	.export _shuffleSong
_shuffleSong:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C1,(I6)+1
	sty I0,(I6) ; and NULL,NULL,B1	// 0 -> B1
	stx D0,(I6)+1 ; add C0,NULL,D0
// 	if (((GpioReadPinDelay((button),15,0)) & activeHigh) || ((GpioReadPinDelay((button),15,0)) & !activeHigh))
	and NULL,NULL,C1 ; ldx (I4)-2,NULL	// 0 -> C1
	call _GpioReadPinDelay
	ldc 15,B0	// 15 -> B0
// jumped away
	ldx (I4)+2,A1	// unspill 'activeHigh' from #-2
	and A0,A1,A0	// ET2 and 'activeHigh' -> ET3
	nop
	jzs F2B5	// compare against zero
	nop
// jumped away
// 	}
// 	{
// 		seed = 0;
	ldc _seed,I0	// ET8
	ldc 0,A0	// 0 -> 1 -> ET0
F2B3:
	stx A0,(I0)/*V*/ ; and NULL,NULL,A1	// ET0 ==> ET8
// 		shuffle = !shuffle;
	ldc _shuffle,I0	// ETa
	ldx (I0),A0/*V*/	// ETa ==> 'shuffle'
	sub A0,NULL,A0	// 'shuffle' != (0) -> (0)
	ldc shuffle_3,A0
	jzc F2B11	// unsigned compare
	nop	// ETa
// jumped away
	sub NULL,ONES,A1	// 1 -> ETb
F2B11:
	ldy (I6)+1,NULL ; stx A1,(I0)/*V*/	// I6 += 1
//  vo_printf("Shuffle - %i \n", shuffle);
	stx A1,(I6)+1	// ETb
	call _vo_printf
	stx A0,(I6)	// ETc
// jumped away
	ldc _seed,I0	// ET8
// 		while ((GpioReadPinDelay((button),15,0)))
	j F2B16
	ldx (I6)-2,NULL	// I6 += -2
// jumped away
F2B13:	// (loop lvl 2)
// 		}
// 		{
// 			seed++;
	ldx (I0),A0/*V*/	// ET8 ==> 'seed'
	sub A0,ONES,A0	// 'seed' - (-1) -> ET11
	stx A0,(I0)/*V*/	// ET11 ==> ET8
F2B16:	// (loop lvl 2)
	ldc 15,B0	// 15 -> B0
	ldc 0,B1	// 0 -> B1
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ETe != (0) -> (0)
	nop
	jzc F2B13	// unsigned compare
	nop
// jumped away
// 		if (seed == 0)
	ldc _seed,I0	// ET8
	ldx (I0),A0/*V*/	// ET8 ==> 'seed'
	sub A0,NULL,A0	// 'seed' != (0) -> (0)
	ldc 19586,A0	// 19586 -> 1 -> ET12
	jzc F2B19	// unsigned compare
	nop
// jumped away
// 		}
// 		{
// 			seed = 19586;
	stx A0,(I0)/*V*/	// ET12 ==> ET8
F2B19:
// 		anyButtonPressed = 1;
	ldc _anyButtonPressed,I0	// ET13
	sub NULL,ONES,A0	// 1 -> 1 -> ET10
	stx A0,(I0)/*V*/ ; and NULL,NULL,A1	// ET10 ==> ET13
// 		idleMode = 0;
	ldc _idleMode,I0	// ET14
	stx A1,(I0)/*V*/	// ET0 ==> ET14
// 		return 1;
F2B1:
	ldy (I6),I0 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F2B5:
	ldc 15,B0	// 15 -> B0
	ldc 0,B1	// 0 -> B1
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	mv A0,B0 ; sub A1,NULL,A1	// A0 -> ET4
	ldc 0,A0	// 0 -> ET6
	jzc F2B9	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A0	// 1 -> ET6
F2B9:
	and B0,A0,A0	// ET4 and ET6 -> ET7
	ldc _seed,I0
	jzc F2B3	// compare against zero
	and NULL,NULL,A0
// jumped away
// 	return 0;
	j F2B1
	and NULL,NULL,A0	// 0 -> 1 -> ET0
// jumped away

//_____________________________________________________________
//
	.sect code,playPause	// 85 words
	.export _playPause
_playPause:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C1,(I6)+1
	stx D0,(I6) ; and NULL,NULL,B1	// 0 -> B1
	sty I0,(I6)+1 ; add C0,NULL,D0
	stx I2,(I6)+1 ; and NULL,NULL,C1
// 	if (((GpioReadPinDelay((button),15,0)) & activeHigh) || ((GpioReadPinDelay((button),15,0)) & !activeHigh))
	ldx (I4)-2,NULL	// I4 += -2
	call _GpioReadPinDelay
	ldc 15,B0	// 15 -> B0
// jumped away
	ldx (I4)+2,A1	// unspill 'activeHigh' from #-2
	and A0,A1,A0	// ET2 and 'activeHigh' -> ET3
	ldc 15,B0	// 15 -> B0
	jzs F3B5	// compare against zero
	nop
// jumped away
// 	}
// 	{
// 		audioDecoder->pause = !audioDecoder->pause;
	ldc _audioDecoder,I0	// ETa
	ldc 40,A0	// 40 -> 1 -> ET9
F3B3:
	ldx (I0),A1/*V*/	// ETa ==> 'audioDecoder'
	add A1,A0,A0	// 'audioDecoder' + ET9 -> AT1e
	mv A0,I0 ; and NULL,NULL,A1	// AT1e -> ETb
	ldx (I0),A0/*V*/	// ETb ==> 40 -> ETc
	sub A0,NULL,A0	// ETc != (0) -> (0)
	ldc 40,A0
	jzc F3B11	// signed compare
	ldc _audioDecoder,I0
// jumped away
	sub NULL,ONES,A1	// 1 -> AT8
F3B11:
	ldx (I0),B0/*V*/ ; ldy (I6)+1,NULL	// ETa ==> 'audioDecoder'
	add B0,A0,B0	// 'audioDecoder' + ET9 -> AT20
	mv B0,I2	// AT20 -> ETb
	stx A1,(I2)/*V*/	// AT8 ==> ETb
// 		   if (audioDecoder->pause)
	ldx (I0),A1/*V*/	// ETa ==> 'audioDecoder'
	add A1,A0,A0	// 'audioDecoder' + ET9 -> AT1f
	mv A0,I0	// AT1f -> ETb
	ldx (I0),A0/*V*/	// ETb ==> 40 -> ETd
	sub A0,NULL,A0	// ETd == (0) -> (0)
	ldc playing_5,A0
	jzs F3B13	// signed compare
	nop
// jumped away
	ldc pausing_4,A0	// ETe
// 		   }
// 		   {
//  vo_printf("PAUSING \n");
	call _vo_printf
	stx A0,(I6)	// ETe
// jumped away
F3B14:
	ldc 15,B0	// 15 -> B0
	ldc _anyButtonPressed,I0	// ET13
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += -1
// 		anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET12 ==> ET13
// 		idleMode = 0;
	ldc _idleMode,I0	// ET14
	stx A0,(I0)/*V*/ ; and NULL,NULL,B1	// ET0 ==> ET14
// 		while ((GpioReadPinDelay((button),15,0)))
F3B20:	// (loop lvl 2)
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET15 != (0) -> (0)
	ldc 15,B0
	jzc F3B20	// unsigned compare
	and NULL,NULL,B1
// jumped away
// 		return 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET12
F3B1:
	ldx (I6)-1,I2
	ldy (I6),I0 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
	ldc playing_5,A0	// ET10
	ldx (I6)+1,NULL	// I6 += 1
F3B13:
// 		   }
// 		   else
// 		   {
//  vo_printf("PLAYING \n");
	stx A0,(I6)	// ET10
	call _vo_printf
	ldc F3B14,LR0
// jumped away
F3B5:
	and NULL,NULL,B1 ; ldx (I6)+1,NULL	// 0 -> B1
	call _GpioReadPinDelay
	mv D0,C0 ; and NULL,NULL,C1	// 0 -> C1
// jumped away
	mv A0,B0 ; sub A1,NULL,A1	// A0 -> ET4
	ldc 0,A0	// 0 -> ET6
	jzc F3B9	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A0	// 1 -> ET6
F3B9:
	and B0,A0,A0	// ET4 and ET6 -> ET7
	ldc 40,A0
	jzc F3B3	// compare against zero
	ldc _audioDecoder,I0
// jumped away
// 	return 0;
	j F3B1
	and NULL,NULL,A0	// 0 -> 1 -> ET0
// jumped away

//_____________________________________________________________
//
	.sect code,volumeUp	// 77 words
	.export _volumeUp
_volumeUp:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; add C0,NULL,A1	// C0 -> 'button'
	sty C1,(I6)+1 ; and NULL,NULL,B1
	stx D0,(I6) ; and NULL,NULL,C1	// 0 -> B1
	sty I0,(I6)+1 ; ldx (I4)-2,NULL
	stx I1,(I6)+1 ; sty I2,(I6)
// 	if (((GpioReadPinDelay((button),15,0)) & activeHigh) || ((GpioReadPinDelay((button),15,0)) & !activeHigh))
	call _GpioReadPinDelay
	ldc 15,B0	// 15 -> B0
// jumped away
	ldx (I4)+2,D0	// unspill 'activeHigh' from #-2
	and A0,D0,A0	// ET2 and 'activeHigh' -> ET3
	nop
	jzs F4B5	// compare against zero
	nop
// jumped away
// 	}
// 	{
// 		if (volume > 0)
	ldc _volume,I0	// ET9
F4B3:
	ldx (I0),A1/*V*/	// ET9 ==> 'volume'
	sub A1,NULL,A1	// 'volume' <= (0) -> (0)
	ldc 228,C0
	jle F4B11	// signed compare
	ldc _stdaudioout,I2
// jumped away
// 		}
// 		{
// 			volume = volume - 6;
	ldc 6,A0	// 6 -> 0 -> ETa
	sub A1,A0,A0	// 'volume' - ETa -> ETb
	stx A0,(I0)/*V*/	// ETb ==> ET9
// 		ioctl(stdaudioout,228, (void *)(volume+256));
F4B11:
	ldc _volume,I0	// ET9
	ldc 256,A1	// 256 -> 0 -> ETc
	ldx (I0),A0/*V*/ ; ldy (I6)+1,NULL	// ET9 ==> 'volume'
	add A0,A1,A0 ; ldx (I2),I2/*V*/	// 'volume' + ETc -> ETd
	call _ioctl
	mv A0,I1	// ETd -> ETe
// jumped away
//  vo_printf("~%04x=%d\n",0x0206, 30-volume/6);
	ldc 6,B1	// 6 -> 0 -> ETa
	call divide16signed
	ldx (I0),B0/*V*/ ; add B1,NULL,A0	// ET9 ==> 'volume'
// jumped away
	ldc 30,D0	// 30 -> 0 -> ET12
	ldx (I6)+1,NULL ; sub D0,A0,A0	// I6 += 1
	stx A0,(I6)+1	// ET14
	ldc 518,A0	// 518 -> 0 -> ET15
	stx A0,(I6)+1	// ET15
	ldc xd_6,A0	// ET16
	call _vo_printf
	stx A0,(I6)	// ET16
// jumped away
	ldc 300,A0	// 300 -> 1 -> ET18
	ldx (I6)-2,NULL	// I6 += 1
// 		Delay(300);
	call _Delay
	stx A0,(I6)	// ET18
// jumped away
	ldc _anyButtonPressed,I0	// ET1a
	sub NULL,ONES,A0 ; ldy (I6)-1,NULL	// I6 += -1
// 		anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A1	// ET19 ==> ET1a
// 		idleMode = 0;
	ldc _idleMode,I0	// ET1b
	stx A1,(I0)/*V*/	// ET0 ==> ET1b
// 		return 1;
F4B1:
	ldy (I6),I2 ; ldx (I6)-1,I1
	ldy (I6),I0 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F4B5:
	ldc 15,B0	// 15 -> B0
	ldc 0,B1	// 0 -> B1
	add A1,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub D0,NULL,D0	// 'activeHigh' != (0) -> (0)
	ldc 0,A1	// 0 -> ET6
	jzc F4B9	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A1	// 1 -> ET6
F4B9:
	and A0,A1,A0	// ET4 and ET6 -> ET7
	ldc _volume,I0
	jzc F4B3	// compare against zero
	nop
// jumped away
// 	return 0;
	j F4B1
	and NULL,NULL,A0	// 0 -> 1 -> ET0
// jumped away

//_____________________________________________________________
//
	.sect code,volumeDown	// 78 words
	.export _volumeDown
_volumeDown:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; add C0,NULL,A1	// C0 -> 'button'
	sty C1,(I6)+1 ; and NULL,NULL,B1
	stx D0,(I6) ; and NULL,NULL,C1	// 0 -> B1
	sty I0,(I6)+1 ; ldx (I4)-2,NULL
	stx I1,(I6)+1 ; sty I2,(I6)
// 	if (((GpioReadPinDelay((button),15,0)) & activeHigh) || ((GpioReadPinDelay((button),15,0)) & !activeHigh))
	call _GpioReadPinDelay
	ldc 15,B0	// 15 -> B0
// jumped away
	ldx (I4)+2,D0	// unspill 'activeHigh' from #-2
	and A0,D0,A0	// ET2 and 'activeHigh' -> ET3
	nop
	jzs F5B5	// compare against zero
	nop
// jumped away
// 	}
// 	{
// 		if (volume < 180)
	ldc _volume,I0	// ET9
	ldc 180,A0	// 180 -> 0 -> ET8
F5B3:
	ldx (I0),A1/*V*/	// ET9 ==> 'volume'
	sub A1,A0,D0	// 'volume' >= ET8 -> AT1c
	ldc 228,C0
	jge F5B11	// signed compare
	ldc _stdaudioout,I2
// jumped away
// 		}
// 		{
// 			volume = volume + 6;
	ldc 6,A0	// 6 -> 0 -> ETa
	add A1,A0,A0	// 'volume' + ETa -> ETb
	stx A0,(I0)/*V*/	// ETb ==> ET9
// 		ioctl(stdaudioout,228, (void *)(volume+256));
F5B11:
	ldc _volume,I0	// ET9
	ldc 256,A0	// 256 -> 0 -> ETc
	ldx (I0),A1/*V*/ ; ldy (I6)+1,NULL	// ET9 ==> 'volume'
	add A1,A0,A0 ; ldx (I2),I2/*V*/	// 'volume' + ETc -> ETd
	call _ioctl
	mv A0,I1	// ETd -> ETe
// jumped away
//  vo_printf("~%04x=%d\n",0x0206, 30-volume/6);
	ldc 6,B1	// 6 -> 0 -> ETa
	call divide16signed
	ldx (I0),B0/*V*/ ; add B1,NULL,A0	// ET9 ==> 'volume'
// jumped away
	ldc 30,D0	// 30 -> 0 -> ET12
	ldx (I6)+1,NULL ; sub D0,A0,A0	// I6 += 1
	stx A0,(I6)+1	// ET14
	ldc 518,A0	// 518 -> 0 -> ET15
	stx A0,(I6)+1	// ET15
	ldc xd_6,A0	// ET16
	call _vo_printf
	stx A0,(I6)	// ET16
// jumped away
	ldc 300,A0	// 300 -> 1 -> ET18
	ldx (I6)-2,NULL	// I6 += 1
// 		Delay(300);
	call _Delay
	stx A0,(I6)	// ET18
// jumped away
	ldc _anyButtonPressed,I0	// ET1a
	sub NULL,ONES,A0 ; ldy (I6)-1,NULL	// I6 += -1
// 		anyButtonPressed = 1;
	stx A0,(I0)/*V*/ ; and NULL,NULL,A1	// ET19 ==> ET1a
// 		idleMode = 0;
	ldc _idleMode,I0	// ET1b
	stx A1,(I0)/*V*/	// ET0 ==> ET1b
// 		return 1;
F5B1:
	ldy (I6),I2 ; ldx (I6)-1,I1
	ldy (I6),I0 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F5B5:
	ldc 15,B0	// 15 -> B0
	ldc 0,B1	// 0 -> B1
	add A1,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub D0,NULL,D0	// 'activeHigh' != (0) -> (0)
	ldc 0,A1	// 0 -> ET6
	jzc F5B9	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A1	// 1 -> ET6
F5B9:
	and A0,A1,A0	// ET4 and ET6 -> ET7
	ldc 180,A0
	jzc F5B3	// compare against zero
	ldc _volume,I0
// jumped away
// 	return 0;
	j F5B1
	and NULL,NULL,A0	// 0 -> 1 -> ET0
// jumped away

//_____________________________________________________________
//
	.sect code,volumeMute	// 86 words
	.export _volumeMute
_volumeMute:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C1,(I6)+1
	stx D0,(I6) ; and NULL,NULL,B1	// 0 -> B1
	sty I0,(I6)+1 ; add C0,NULL,D0
	sty I2,(I6) ; and NULL,NULL,C1	// C0 -> 'button'
	stx I1,(I6)+1 ; ldy (I4)-2,NULL
// 	if (((GpioReadPinDelay((button),15,0)) & activeHigh) || ((GpioReadPinDelay((button),15,0)) & !activeHigh))
	call _GpioReadPinDelay
	ldc 15,B0	// 15 -> B0
// jumped away
	ldx (I4)+2,A1	// unspill 'activeHigh' from #-2
	and A0,A1,A0	// ET2 and 'activeHigh' -> ET3
	nop
	jzs F6B5	// compare against zero
	nop
// jumped away
// 	}
// 	{
// 		mute = !mute;
	ldc _mute,I0	// ET9
F6B3:
	ldx (I0),A0/*V*/ ; and NULL,NULL,A1	// ET9 ==> 'mute'
	sub A0,NULL,A0	// 'mute' != (0) -> (0)
	ldc mutei_7,A0
	jzc F6B11	// unsigned compare
	ldc _mute,I0
// jumped away
	sub NULL,ONES,A1	// 1 -> ETa
F6B11:
	ldy (I6)+1,NULL ; stx A1,(I0)/*V*/	// I6 += 1
//  vo_printf("Mute - %i \n", mute);
	stx A1,(I6)+1	// ETa
	call _vo_printf
	stx A0,(I6)	// ETb
// jumped away
	ldx (I0),A0/*V*/ ; ldy (I6)-2,NULL	// I6 += -2
// 		if (mute)
	sub A0,NULL,A0	// 'mute' != (0) -> (0)
	ldc 456,I1
	jzc F6B13	// unsigned compare
	ldc 228,C0
// jumped away
// 		}
// 		else
// 		{
// 			ioctl(stdaudioout,228, (void *)(volume+256));
	ldc _volume,I0	// ET12
	ldc 256,A0	// 256 -> 0 -> ET11
	ldx (I0),A1/*V*/ ; ldy (I6)+1,NULL	// ET12 ==> 'volume'
	ldc _stdaudioout,I0	// ETf
	add A1,A0,A0 ; ldx (I0),I2/*V*/	// 'volume' + ET11 -> ET13
	mv A0,I0	// ET13 -> ET14
	call _ioctl
	mv I0,I1	// ET14 -> I1
// jumped away
F6B15:
// 		anyButtonPressed = 1;
	ldc 15,B0	// 15 -> B0
	sub NULL,ONES,A0	// 1 -> 1 -> ET16
	ldc _anyButtonPressed,I0	// ET17
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET16 ==> ET17
// 		idleMode = 0;
	ldc _idleMode,I0	// ET18
	stx A0,(I0)/*V*/ ; and NULL,NULL,B1	// ET0 ==> ET18
// 		while ((GpioReadPinDelay((button),15,0)))
F6B21:	// (loop lvl 2)
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET19 != (0) -> (0)
	ldc 15,B0
	jzc F6B21	// unsigned compare
	and NULL,NULL,B1
// jumped away
// 		return 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET16
F6B1:
	ldy (I6),I2 ; ldx (I6)-1,I1
	ldy (I6),I0 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
// 		}
// 		{
// 			ioctl(stdaudioout,228, (void *)(200 +256));
	ldc 228,C0	// 228 -> C0
	ldc 456,I1	// 456 -> I1
F6B13:
	ldc _stdaudioout,I0	// ETf
	ldx (I0),I2/*V*/ ; ldy (I6)+1,NULL	// ETf ==> 'stdaudioout'
	call _ioctl
	ldc F6B15,LR0
// jumped away
F6B5:
	ldc 15,B0	// 15 -> B0
	ldc 0,B1	// 0 -> B1
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	mv A0,B0 ; sub A1,NULL,A1	// A0 -> ET4
	ldc 0,A0	// 0 -> ET6
	jzc F6B9	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A0	// 1 -> ET6
F6B9:
	and B0,A0,A0	// ET4 and ET6 -> ET7
	ldc _mute,I0
	jzc F6B3	// compare against zero
	nop
// jumped away
// 	return 0;
	j F6B1
	and NULL,NULL,A0	// 0 -> 1 -> ET0
// jumped away

//_____________________________________________________________
//
	.sect code,stopSong	// 55 words
	.export _stopSong
_stopSong:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; add C0,NULL,A1	// C0 -> 'button'
	sty C1,(I6)+1 ; and NULL,NULL,B1
	sty I0,(I6) ; and NULL,NULL,C1	// 0 -> B1
	stx D0,(I6)+1 ; ldy (I4)-2,NULL
// 	if (((GpioReadPinDelay((button),15,0)) & activeHigh) || ((GpioReadPinDelay((button),15,0)) & !activeHigh))
	call _GpioReadPinDelay
	ldc 15,B0	// 15 -> B0
// jumped away
	ldx (I4)+2,D0	// unspill 'activeHigh' from #-2
	and A0,D0,A0	// ET2 and 'activeHigh' -> ET3
	nop
	jzs F7B5	// compare against zero
	nop
// jumped away
	ldc songstopp_8,A0	// ET8
	ldx (I6)+1,NULL	// I6 += 1
F7B3:
// 	}
// 	{
//  vo_printf("Song stopped! \n");
	call _vo_printf
	stx A0,(I6)	// ET8
// jumped away
	ldc _audioDecoder,I0	// ETc
	ldx (I0),I0/*V*/ ; ldy (I6)-1,NULL	// I6 += -1
// 		audioDecoder->cs.cancel = 1;
	ldx (I0)+7,NULL ; sub NULL,ONES,A0	// ETd += 13
	ldx (I0)+6,NULL ; sub NULL,ONES,A1	// ...
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ETa ==> ETd
// 		running = 0;
	ldc _running,I0	// ETe
	stx A0,(I0)/*V*/	// ET0 ==> ETe
// 		anyButtonPressed = 1;
	ldc _anyButtonPressed,I0	// ET10
	stx A1,(I0)/*V*/	// ETf ==> ET10
// 		idleMode = 0;
	ldc _idleMode,I0	// ET11
	stx A0,(I0)/*V*/ ; add A1,NULL,A0	// ET0 ==> ET11
// 		return 1;
F7B1:
	ldy (I6),I0 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F7B5:
	ldc 15,B0	// 15 -> B0
	ldc 0,B1	// 0 -> B1
	add A1,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub D0,NULL,D0	// 'activeHigh' != (0) -> (0)
	ldc 0,A1	// 0 -> ET6
	jzc F7B9	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A1	// 1 -> ET6
F7B9:
	and A0,A1,A0 ; ldx (I6)+1,NULL	// ET4 and ET6 -> ET7
	ldc songstopp_8,A0
	jzc F7B3	// compare against zero
	nop
// jumped away
// 	return 0;
	j F7B1
	ldx (I6)-1,NULL ; and NULL,NULL,A0
// jumped away

//_____________________________________________________________
//
	.sect code,previousSong	// 91 words
	.export _previousSong
_previousSong:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C1,(I6)+1
	stx D0,(I6) ; and NULL,NULL,B1	// 0 -> B1
	sty I0,(I6)+1 ; add C0,NULL,D0
	stx I2,(I6)+1 ; and NULL,NULL,C1
// 	if (((GpioReadPinDelay((button),15,0)) & activeHigh) || ((GpioReadPinDelay((button),15,0)) & !activeHigh))
	ldx (I4)-2,NULL	// I4 += -2
	call _GpioReadPinDelay
	ldc 15,B0	// 15 -> B0
// jumped away
	ldx (I4)+2,A1	// unspill 'activeHigh' from #-2
	and A0,A1,A0	// ET2 and 'activeHigh' -> ET3
	nop
	jzs F8B5	// compare against zero
	nop
// jumped away
	ldc previouss_9,A0	// ET8
	ldx (I6)+1,NULL	// I6 += 1
F8B3:
// 	}
// 	{
//  vo_printf("previous Song hit! \n");
	call _vo_printf
	stx A0,(I6)	// ET8
// jumped away
	ldc _audioDecoder,I0	// ETc
	ldc _repeatSongStatus,I2	// ETe
	ldc 3,B0	// 3 -> 2 -> B0
	ldx (I0),I0/*V*/ ; ldy (I6)-1,NULL	// I6 += -1
// 		audioDecoder->cs.cancel = 1;
	ldx (I0)+7,NULL ; sub NULL,ONES,A0	// ETd += 13
	ldx (I0)+6,NULL ; and NULL,NULL,B1	// ...
	mv B1,B1	// update guard bits (cmp)
	stx A0,(I0)+1/*V*/ ; and NULL,NULL,A0	// ETa ==> ETd
// 		repeatSongStatus = 0;
	stx A0,(I2)/*V*/	// ET0 ==> ETe
// 		shuffle = 0;
	ldc _shuffle,I2	// ETf
	stx A0,(I2)/*V*/	// ET0 ==> ETf
// 		if (audioDecoder->cs.playTimeSeconds < 3)
	ldx (I0)+1,A0/*V*/
	ldx (I0)-1,A1/*V*/
	mv A1,A1	// 0 -> B1
	sub A,B,A	// ET12 >= ET13 -> AT21
	ldc _fileNum,I0
	jge F8B12	// signed compare
	nop	// ET15
// jumped away
// 		}
// 		{
// 			fileNum -= 2;
	add B0,ONES,A1 ; ldx (I0),A0/*V*/
	sub A0,A1,A0	// 'fileNum' - ET14 -> ET16
F8B13:
	stx A0,(I0)/*V*/	// ET16 ==> ET15
// 		if (fileNum < -1)
	ldc _fileNum,I0	// ET15
	ldx (I0),A0/*V*/	// ET15 ==> 'fileNum'
	sub A0,ONES,A1	// 'fileNum' >= (-1) -> AT22
	ldc -1,A0
	jge F8B15	// signed compare
	ldc 15,B0	// -1 -> 0 -> ET18
// jumped away
// 		}
// 		{
// 			fileNum = -1;
	stx A0,(I0)/*V*/	// ET18 ==> ET15
// 		anyButtonPressed = 1;
F8B15:
	ldc _anyButtonPressed,I0	// ET1a
	sub NULL,ONES,A0	// 1 -> 1 -> ET19
	stx A0,(I0)/*V*/ ; and NULL,NULL,A0	// ET19 ==> ET1a
// 		idleMode = 0;
	ldc _idleMode,I0	// ET1b
	stx A0,(I0)/*V*/ ; and NULL,NULL,B1	// ET0 ==> ET1b
// 		while ((GpioReadPinDelay((button),15,0)))
F8B19:	// (loop lvl 2)
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	sub A0,NULL,A0	// ET1c != (0) -> (0)
	ldc 15,B0
	jzc F8B19	// unsigned compare
	and NULL,NULL,B1
// jumped away
// 		return 1;
	sub NULL,ONES,A0	// 1 -> 1 -> ET19
F8B1:
	ldx (I6)-1,I2
	ldy (I6),I0 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
// 		}
// 		else
// 		{
// 			fileNum -= 1;
	ldc _fileNum,I0	// ET15
F8B12:
	ldx (I0),A0/*V*/	// ET15 ==> 'fileNum'
	j F8B13
	add A0,ONES,A0	// 'fileNum' + (-1) -> ET17
// jumped away
F8B5:
	ldc 15,B0	// 15 -> B0
	ldc 0,B1	// 0 -> B1
	add D0,NULL,C0 ; ldx (I6)+1,NULL	// 'button' -> C0
	call _GpioReadPinDelay
	and NULL,NULL,C1	// 0 -> C1
// jumped away
	mv A0,B0 ; sub A1,NULL,A1	// A0 -> ET4
	ldc 0,A0	// 0 -> ET6
	jzc F8B9	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A0	// 1 -> ET6
F8B9:
	and B0,A0,A0 ; ldx (I6)+1,NULL	// ET4 and ET6 -> ET7
	ldc previouss_9,A0
	jzc F8B3	// compare against zero
	nop
// jumped away
// 	return 0;
	j F8B1
	ldx (I6)-1,NULL ; and NULL,NULL,A0
// jumped away

//_____________________________________________________________
//
	.sect data_x,const_x	// 136 words
nextsong_1:
	.word "Next song button pressed! \n"

	.zero 1
repeat_2:
	.word "Repeat - %i \n"

	.zero 1
shuffle_3:
	.word "Shuffle - %i \n"

	.zero 1
pausing_4:
	.word "PAUSING \n"

	.zero 1
playing_5:
	.word "PLAYING \n"

	.zero 1
xd_6:
	.word "~%04x=%d\n"

	.zero 1
mutei_7:
	.word "Mute - %i \n"

	.zero 1
songstopp_8:
	.word "Song stopped! \n"

	.zero 1
previouss_9:
	.word "previous Song hit! \n"

	.zero 1

	.end
