
//_____________________________________________________________
//
	.sect code,LcdDelay	// 22 words
	.export _LcdDelay
_LcdDelay:
	ldx (I6)+2,NULL	// I6 += 2
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	stx B0,(I6) ; sty B1,(I6)
	ldx (I4)-3,NULL	// I4 += -3
	ldx (I4)+1,A0	// unspill A0 from #0
	j F0B6
	ldx (I4)+2,A1	// unspill A1 from #0
// jumped away
F0B3:	// (loop lvl 2)
//   }
// {
//     n = ~n;
	xor B,ONES,A	// 'n' xor (-1) -> 'n'
//     n = ~n;
	xor A,ONES,A	// 'n' xor (-1) -> AT6
F0B6:	// (loop lvl 2)
	add A,ONES,B	// AT6 + (-1) -> ET2
	ldc 0,A2	// update guard bits (cmp)
	sub A,NULL,A	// AT6 != (0) -> (0)
	nop
	jzc F0B3	// unsigned compare
	nop
// jumped away
	ldy (I6),B1 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	jr
	ldx (I6)-2,NULL
// jumped away

//_____________________________________________________________
//
	.sect code,TFTWriteRegister	// 51 words
	.export _TFTWriteRegister
_TFTWriteRegister:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	stx B0,(I6) ; and NULL,NULL,A0	// 0 -> 0 -> ET0
	sty B1,(I6)+1
	stx I0,(I6)+1 ; sty I2,(I6)
	ldc _devLcdHw,I0	// I0
	ldc _devLcdHw+4,I2	// ET4
// 	devLcdHw.Ioctl(&devLcdHw,1, 0);
	stx A0,(I6)+1 ; sub NULL,ONES,A0	// ET0
	stx A0,(I6)	// ET1
	ldx (I2),A0	// ET4 ==> 4 -> ET5
	mv A0,LR0
	jr
	ldc lo(F1B3),LR0	// (return address)
// jumped away
F1B3:
	ldc _devLcdHw+6,I2	// ETd
	ldc 64679,I0	// 64679 -> ET8
	ldc 16384,A1	// 16384 -> 1 -> ET7
	ldc 2,B1	// 2 -> 1 -> ET9
	ldx (I6)-1,NULL ; and NULL,NULL,B0	// 0 -> 1 -> ETa
	sty A1,(I0)/*V*/ ; ldx (I4)-2,NULL	// I4 += -2
// (*(__y volatile u_int16 *)(u_int16)(0xFCA7)) = (1 << 14);
	ldc _devLcdHw,I0	// I0
	stx B1,(I6)+1	// ET7 ==> ET8
// 	devLcdHw. Write(&devLcdHw,&reg,0,2);
	stx B0,(I6)+1	// ETa
	stx I4,(I6) ; ldy (I4)+2,NULL	// ETb
	ldx (I2),A0	// ETd ==> 6 -> ETe
	mv A0,LR0
	jr
	ldc lo(F1B4),LR0	// (return address)
// jumped away
F1B4:
	ldc 64678,I0	// 64678 -> ET10
	ldx (I6)-2,NULL ; sty A1,(I0)/*V*/	// I4 += -3
// (*(__y volatile u_int16 *)(u_int16)(0xFCA6)) = (1 << 14);
	ldc _devLcdHw,I0	// I0
	stx B1,(I6)+1 ; ldy (I4)-3,NULL	// ET7 ==> ET10
// 	devLcdHw. Write(&devLcdHw,&data,0,2);
	stx B0,(I6)+1	// ETa
	stx I4,(I6) ; ldy (I4)+3,NULL	// ET11
	ldx (I2),A0	// ETd ==> 6 -> ETe
	mv A0,LR0
	jr
	ldc lo(F1B5),LR0	// (return address)
// jumped away
F1B5:
	ldc 64710,I0	// 64710 -> ET14
	sub NULL,ONES,A0 ; ldx (I6)-3,NULL	// I6 += -3
// (*(__y volatile u_int16 *)(u_int16)(0xFCC6)) = (1 << 0);
	sty A0,(I0)/*V*/	// ET13 ==> ET14
	ldy (I6),I2 ; ldx (I6)-1,I0
	ldy (I6),B1 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,TFTWriteVector	// 67 words
	.export _TFTWriteVector
_TFTWriteVector:
	ldx (I6)+2,NULL	// I6 += 2
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	ldc 63488,A1	// 63488 -> 1 -> ET0
	stx B0,(I6) ; sty B1,(I6)+1
	ldc 255,B0	// 255 -> 1 -> ET15
	add B0,NULL,B1 ; stx C0,(I6)
	sty C1,(I6)+1 ; ldx (I4)-2,NULL
	stx D0,(I6) ; sty D1,(I6)+1
	ldc 32768,D1	// 32768 -> 1 -> ET11
	ldc 1536,D0	// 1536 -> 1 -> ET19
	stx I0,(I6) ; sty I1,(I6)+1
	ldc 64678,I1	// 64678 -> ET9
	ldc 64560,I0	// 64560 -> ET1
	stx I2,(I6) ; sty I3,(I6)
// *(__y volatile u_int16 *)(u_int16)(0xFC30)) &= ~0x07ff;
	ldc 64711,I3	// 64711 -> ET12
	ldy (I0),A0/*V*/ ; ldx (I4)+2,I2	// ET1 ==> ET2
	and A0,A1,A0	// ET2 and ET0 -> ET3
	sty A0,(I0)/*V*/	// ET3 ==> ET1
// (*(__y volatile u_int16 *)(u_int16)(0xFCA0)) |= 0x06ff;
	ldc 64672,I0	// 64672 -> ET5
	ldc 1791,A0	// 1791 -> 1 -> ET4
	ldy (I0),A1/*V*/	// ET5 ==> ET6
	or A1,A0,A0	// ET6 or ET4 -> ET7
	sty A0,(I0)+6/*V*/ ; lsr D1,A1

// {(*(__y volatile u_int16 *)(u_int16)(0xFCA6)) = (1 << 0xa);
	ldc 1024,A0	// 1024 -> 1 -> ET8
	sty A0,(I0)/*V*/ ; lsr A0,A0	// ET8 ==> ET9

// ;
// {(*(__y volatile u_int16 *)(u_int16)(0xFCA6)) = (1 << 0x9);
	sty A0,(I0)/*V*/	// ETa ==> ET9
// ;
// 	while (*vec != -1)
	ldc 1024,A0	// 1024 -> 1 -> ET8
	ldc 64679,I0	// 64679 -> ET14
F2B6:	// (loop lvl 2)
	ldx (I2),C0	// AT2a ==> ETb
	sub C0,ONES,C0	// ETb != (-1) -> AT22
	nop
	jzs F2B4	// signed compare
	nop
// jumped away
// 	}
// {
// 		parm = *vec++;
	ldx (I2)+1,C0 ; sty D1,(I3)/*V*/	// AT2a ==> AT2b
// 		reg = *vec++;
	ldx (I2)+1,C1 ; sty A1,(I0)/*V*/	// AT2a ==> 'reg'

// {(*(__y volatile u_int16 *)(u_int16)(0xFCC7)) = (1 << 0xf);

// ;
// {(*(__y volatile u_int16 *)(u_int16)(0xFCA7)) = (1 << 0xe);

// ;
// {(*(__y volatile u_int16 *)(u_int16)(0xFCA7))=0x00ff;
	sty B0,(I0)/*V*/ ; and C1,B1,C1	// ET15 ==> ET14
// (*(__y volatile u_int16 *)(u_int16)(0xFCA6))=((reg)&0xff);
// (*(__y volatile u_int16 *)(u_int16)(0xFCA7))=0x0400;

// {(*(__y volatile u_int16 *)(u_int16)(0xFCA7)) = (1 << 0xa);

// ;{(*(__y volatile u_int16 *)(u_int16)(0xFCA7)) = (1 << 0xa);
// ;(*(__y volatile u_int16 *)(u_int16)(0xFCA6))=0x0600;
// ;
// 		while (parm--)
	j F2B10
	sty C1,(I1)/*V*/	// ET17 ==> ET9
// jumped away
F2B7:	// (loop lvl 3)
// ;
// 		}

// {
// {(*(__y volatile u_int16 *)(u_int16)(0xFCA6)) = (1 << 0xe);
	sty A1,(I1)/*V*/ ; ldx (I2)+1,C0	// ET13 ==> ET9

// ;
// {(*(__y volatile u_int16 *)(u_int16)(0xFCA7))=0x00ff;
	sty B0,(I0)/*V*/ ; and C0,B1,C0	// ET15 ==> ET14
// (*(__y volatile u_int16 *)(u_int16)(0xFCA6))=((*vec++)&0xff);
	sty C0,(I1)/*V*/ ; add C1,NULL,C0	// ET1c ==> ET9
// (*(__y volatile u_int16 *)(u_int16)(0xFCA7))=0x0400;

// {(*(__y volatile u_int16 *)(u_int16)(0xFCA7)) = (1 << 0xa);

// ;{(*(__y volatile u_int16 *)(u_int16)(0xFCA7)) = (1 << 0xa);
// ;(*(__y volatile u_int16 *)(u_int16)(0xFCA6))=0x0600;
F2B10:	// (loop lvl 3)
	sty A0,(I0)/*V*/ ; add C0,ONES,C1	// ET8 ==> ET14
	sty A0,(I0)/*V*/ ; sub C0,NULL,C0	// ET8 ==> ET14
	sty A0,(I0)/*V*/	// ET8 ==> ET14
	jzc F2B7	// signed compare
	sty D0,(I1)/*V*/	// ET19 ==> ET9
// jumped away
	j F2B6
	nop
// jumped away
F2B4:

// {(*(__y volatile u_int16 *)(u_int16)(0xFCC6)) = (1 << 0xf);
	ldc 64710,I0	// 64710 -> ET1e
	ldc 32768,A0	// 32768 -> 1 -> ET11
	ldc 2047,A1	// 2047 -> 1 -> ET1f
	sty A0,(I0)/*V*/	// ET11 ==> ET1e
// ;
// (*(__y volatile u_int16 *)(u_int16)(0xFC30)) |= 0x07ff;
	ldc 64560,I0	// 64560 -> ET1
	ldy (I0),A0/*V*/	// ET1 ==> ET20
	or A0,A1,A0	// ET20 or ET1f -> ET21
	sty A0,(I0)/*V*/	// ET21 ==> ET1
	ldy (I6),I3 ; ldx (I6)-1,I2
	ldy (I6),I1 ; ldx (I6)-1,I0
	ldy (I6),D1 ; ldx (I6)-1,D0
	ldy (I6),C1 ; ldx (I6)-1,C0
	ldy (I6),B1 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	jr
	ldx (I6)-2,NULL
// jumped away

//_____________________________________________________________
//
	.sect code,MyLcdFilledRectangle	// 176 words
	.export _MyLcdFilledRectangle
_MyLcdFilledRectangle:
	ldc 16,I7
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)*,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C0,(I6)+1
	stx C1,(I6) ; sty D0,(I6)+1
	stx D1,(I6) ; sty I0,(I6)+1
	ldc InitTemplate_1,I0	// ET0
	stx I2,(I6) ; sty LC,(I6)+1
	ldc 11,LC	// copy 13 words
	stx LS,(I6) ; sty LE,(I6)
	loop LC,MEMCOPY0-1
	ldx (I4)+3,NULL ; ldy (I0)+1,A0	// I4 += 3
//loop resumes
	stx A0,(I4)+1 ; ldy (I0)+1,A0
//	(0 nop's needed)
// loop end
	// memcopy
MEMCOPY0:
	ldc -20,I5
	stx A0,(I4)+1 ; ldy (I6)+1,NULL
	ldx (I4)*,NULL ; and D1,NULL,D1	// I4 += -20

	ldx (I4)+2,B0 ; and C1,NULL,C1	// unspill 'x2' from #0
	add B0,NULL,D0 ; ldx (I4)+3,A0	// 'x2' msw ET3
	add A0,NULL,C0 ; mv A0,I7	// 'x1' msw ET4
	sub D,C,C	// ET3 - ET4 -> ET5
	sub C,ONES,C	// ET5 - (-1) -> 'n'
	stx C0,(I4) ; sty C1,(I4)-6	// C0 spills to #0
// *= (((u_int32)y2-y1)+1);
	ldx (I4)+2,B1 ; and C1,NULL,C1	// unspill 'y2' from #0
	add B1,NULL,C0 ; ldx (I4)+4,A1	// 'y2' msw ET8
	mv A1,D0	// 'y1' msw ET9
	sub C,D,D ; ldx (I4),C0 ; ldy (I4),C1	// ET8 - ET9 -> ETa
	sub D,ONES,D ; mv C0,A0	// ETa - (-1) -> ETb
	muluu C1,D0	// 'n' * ETb -> 'n'
	add NULL,P,C
	muluu D1,A0
	ldc 0,D1
	macuu A0,D0,C ; mv I7,A0
	add C0,P,C ; mv A0,D0
// 	n *= 2;
	add C,C,C	// 'n' + 'n' -> 'n'
	stx C0,(I4) ; sty C1,(I4)+4	// C0 spills to #0
// 	}

// k++ = (x1>>8);
	ldc 255,C0	// 255 -> 1 -> ET18
	ldc -8,C1	// -8 -> 0 -> ET12
	ashl D,C1,D	// AT49 <- ET12 -> AT4a
	ldc 0,D1
	stx D0,(I4)+1 ; and A0,C0,A0	// ET13 ==> 'k'
// *k++ = (x1&0xff);
	stx A0,(I4)+1 ; add B0,NULL,D0	// ET19 ==> 'k'
// 		*k++ = (x2>>8);
	ashl D,C1,D	// AT4b <- ET12 -> AT4c
	ldc 0,D1
	stx D0,(I4)+1 ; and B0,C0,A0	// ET1c ==> 'k'
// *k++ = (x2&0xff);
	stx A0,(I4)+3 ; add A1,NULL,D0	// ET1f ==> 'k'
// 		k += 2;
// 		*k++ = (y1>>8);
	ashl D,C1,D	// AT4d <- ET12 -> AT4e
	stx D0,(I4)+1 ; and A1,C0,A0	// ET23 ==> 'k'
	stx A0,(I4)+1 ; and A1,NULL,A1
	mv B1,A0	// ET26 ==> 'k'
// *k++ = (y1&0xff);
// 		*k++ = (y2>>8);
	ashl A,C1,A	// AT4f <- ET12 -> AT50
	stx A0,(I4)+1 ; and B1,C0,A0	// ET29 ==> 'k'
// *k++ = (y2&0xff);
	ldc 49152,C0	// 49152 -> C0
	stx A0,(I4)-7 ; and B,NULL,B	// ET2c ==> 'k'
	ldx (I4)-7,NULL ; and NULL,NULL,C1	// ...
// 	ObtainHwLocksBIP(0,(1UL<< 14)|(1UL<< 15),0);
	call _ObtainHwLocksBIP
	and D,NULL,D	// 0 -> D
// jumped away
	ldc 14,C0	// 14 -> C0
	ldx (I4)+3,NULL ; ldy (I6)+1,NULL	// I4 += 3
// 	TFTWriteVector(cmd);
	call _TFTWriteVector
	stx I4,(I6) ; ldy (I4)-3,NULL	// ET1
// jumped away
// 	GpioSetPin(0x0e, 0);
	call _GpioSetPin
	and NULL,NULL,C1	// I6 += -1
// jumped away
	ldc _devLcdHw,I0	// I0
	ldc _devLcdHw+4,I2	// ET37
	ldx (I6)+1,NULL ; and NULL,NULL,C1	// I6 += 1
// 	devLcdHw.Ioctl(&devLcdHw,1, 0);
	stx C1,(I6)+1 ; sub NULL,ONES,A0	// ET34
	stx A0,(I6)	// ET16
	ldx (I2),A0	// ET37 ==> 4 -> ET38
	mv A0,LR0
	jr
	ldc lo(F3B6),LR0	// (return address)
// jumped away
F3B6:
	ldc _devLcdHw,I0	// I0
	ldc _devLcdHw+6,I2	// ET3d
	ldx (I6)-1,NULL ; sub NULL,ONES,A0	// I6 += 1
// 	devLcdHw. Write(&devLcdHw,0,0x2C,1);
	stx A0,(I6)+1	// ET3a
	ldc 44,A0	// 44 -> 1 -> ET3b
	stx A0,(I6)+1	// ET3b
	stx C1,(I6)	// ET34
	ldx (I2),A0	// ET3d ==> 6 -> ET3e
	mv A0,LR0
	jr
	ldc lo(F3B7),LR0	// (return address)
// jumped away
F3B7:
	ldc 14,C0	// 14 -> C0
// 	GpioSetPin(0x0e, 1);
	sub NULL,ONES,C1 ; ldx (I6)-2,NULL	// I4 += -6
	call _GpioSetPin
	ldy (I4)-6,NULL	// I6 += -3
// jumped away
// 	if (texture)
	ldx (I4)+6,A0	// unspill 'texture' from #-6
	sub A0,NULL,A0	// 'texture' == (0) -> (0)
	ldc 16384,A1
	jzs F3B25	// signed compare
	ldc _devLcdHw,I0	// I0
// jumped away
	ldx (I4)+1,NULL ; ldy (I6)+1,NULL	// I4 += 1
// 	}
// {
// 		devLcdHw. Write(&devLcdHw,texture,0,(u_int16)n);
	ldx (I4),B0 ; ldy (I4)-1,B1	// unspill B0 from #0
	stx B0,(I6)+1 ; and NULL,NULL,A1	// ET40
	stx A1,(I6)+1	// ET32
	stx A0,(I6)	// 'texture'
	ldx (I2),A0	// ET3d ==> 6 -> ET3e
	mv A0,LR0
	jr
	ldc lo(F3B12),LR0	// (return address)
// jumped away
F3B12:
	ldx (I6)-3,NULL	// I6 += -3
F3B11:
	ldc _devLcdHw,I0	// I0
	ldc _devLcdHw+4,I2	// ET37
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
// 	devLcdHw.Ioctl(&devLcdHw,2, 0);
	stx A0,(I6)+1	// ET34
	ldc 2,A0	// 2 -> 0 -> ETf
	stx A0,(I6)	// ETf
	ldx (I2),A0	// ET37 ==> 4 -> ET38
	mv A0,LR0
	jr
	ldc lo(F3B22),LR0	// (return address)
// jumped away
F3B22:
	and NULL,NULL,C1 ; ldx (I6)-1,NULL	// 0 -> C1
	and B,NULL,B	// I6 += -2
// 	ReleaseHwLocksBIP(0,(1UL<< 14)|(1UL<< 15),0);
	and D,NULL,D	// 0 -> D
	call _ReleaseHwLocksBIP
	ldc 49152,C0	// 49152 -> C0
// jumped away
	ldy (I6),LE ; ldx (I6)-1,LS
	ldy (I6),LC ; ldx (I6)-1,I2
	ldy (I6),I0 ; ldx (I6)-1,D1
	ldy (I6),D0 ; ldx (I6)-1,C1
	ldy (I6),C0 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
	ldc 16384,A1	// 16384 -> 1 -> ET44
F3B25:
	ldc _devLcdHw+6,I2	// ET3d
	ldx (I4)-7,NULL ; add A1,NULL,D0
	ldx (I4)+7,C0 ; and NULL,NULL,D1	// 0 -> D1
	j F3B16
	and NULL,NULL,C1	// 0 -> 0 -> ET34
// jumped away
F3B13:	// (loop lvl 2)
	ldc 0,D2	// update guard bits (cmp)
	ldx (I4)+1,NULL ; ldy (I6)+1,NULL	// I4 += 1
// 		}
// {
// 			if (n>16384)
	ldx (I4),B0 ; ldy (I4),B1	// unspill B0 from #0
	ldc 0,B2	// update guard bits (cmp)
	sub D,B,B	// ET42 > 'n' -> AT52
	ldc _devLcdHw,I0	// I0
	jcc F3B17	// unsigned compare
	nop	// I0
// jumped away
// 			}
// else {
// 				devLcdHw. Write(&devLcdHw,0,color,(u_int16)n);
	ldx (I4),B0 ; ldy (I4)-1,B1	// unspill B0 from #0
	stx B0,(I6)+1	// ET40
	stx C0,(I6)+1	// 'color'
	stx C1,(I6)	// ET34
	ldx (I2),A0	// ET3d ==> 6 -> ET3e
	mv A0,LR0
	jr
	ldc lo(F3B21),LR0	// (return address)
// jumped away
F3B21:	// (loop lvl 2)
	ldx (I4)+1,NULL ; ldy (I6)-3,NULL	// I4 += 1
	and B,NULL,B	// 0 -> 'n'
// 				n=0;
	stx B0,(I4) ; sty B1,(I4)-1	// B0 spills to #0
F3B16:	// (loop lvl 2)
	ldx (I4)+1,NULL	// I4 += 1
	ldx (I4),B0 ; ldy (I4)-1,B1	// unspill B0 from #0
	ldc 0,B2	// update guard bits (cmp)
	sub B,NULL,B	// 'n' != (0) -> (0)
	nop
	jzc F3B13	// unsigned compare
	nop
// jumped away
	j F3B11
	nop
// jumped away
F3B17:	// (loop lvl 2)
// 			}
// {
// 				n -= 16384;
	ldx (I4),B0 ; ldy (I4),B1	// unspill B0 from #0
	sub B,D,B	// 'n' - ET42 -> 'n'
	stx B0,(I4) ; sty B1,(I4)-1	// B0 spills to #0
// 				devLcdHw. Write(&devLcdHw,0,color,16384);
	stx A1,(I6)+1	// ET44
	stx C0,(I6)+1	// 'color'
	stx C1,(I6)	// ET34
	ldx (I2),A0	// ET3d ==> 6 -> ET3e
	mv A0,LR0
	jr
	ldc lo(F3B20),LR0	// (return address)
// jumped away
F3B20:	// (loop lvl 2)
	j F3B16
	ldx (I6)-3,NULL	// I6 += -3
// jumped away

//_____________________________________________________________
//
	.sect code,MyLcdTextOutXY	// 120 words
	.export _MyLcdTextOutXY
_MyLcdTextOutXY:
	ldc 7,A0	// 7 -> 1 -> ET1c
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+6,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C0,(I6)+1
	stx C1,(I6) ; sty D0,(I6)+1
	ldc _buff8ffb18,D0	// ETc
	stx D1,(I6) ; add A0,NULL,C1
	sty I0,(I6)+1 ; ldx (I4)-3,NULL
	stx I1,(I6) ; sty I2,(I6)+1
	ldc _lcd0+4,I1	// ET1a
	stx I3,(I6) ; sty LC,(I6)+1
	ldc _lcd0+5,I3	// ET9
	stx LS,(I6) ; sty LE,(I6)
	ldx (I4)+1,B1	// unspill 'y1' from #-3
	add B1,A0,A0 ; ldx (I4)+5,B0	// 'y1' + ET1c -> ET2c
	stx A0,(I4)-7	// ET2c spills to #0
	j F4B6
	ldx (I4)+4,I2	// unspill AT3f from #-4
// jumped away
F4B9:	// (loop lvl 2)
// 		LcdFilledRectangle(x1,y1,x1+6,y1+7,buff,0);
	stx A0,(I6)+1	// ETe
	stx D0,(I6)+1	// ETc
	ldx (I4)-3,A0	// unspill ET2c from #0
	stx A0,(I6)+1	// ET2c
	ldc 6,A0	// 6 -> ET2d
	add B0,A0,A0	// AT40 + ET2d -> ET2e
	stx A0,(I6)+1	// ET2e
	stx B1,(I6)+1	// 'y1'
	call _LcdFilledRectangle
	stx B0,(I6)	// AT40
// jumped away
	ldx (I6)-6,NULL ; ldy (I2)+1,NULL	// I6 += -6
	add B0,C1,B0	// AT40 + ET1c -> AT40
// 		x1 += 7;
// 		s++;
F4B6:	// (loop lvl 2)
	ldx (I2),A0	// AT3f ==> ET0
	sub A0,NULL,A0	// ET0 == (0) -> (0)
	ldc _buff8ffb18,I0	// I0
	jzs F4B1	// signed compare
	nop
// jumped away
// 	}

	ldx (I2),A0	// AT3f ==> ET0
	add A0,A0,A1	// ET0 + ET0 -> AT3
	add A0,A1,A1	// ET0 + AT3 -> ET4
	ldc _latin1,A0	// ET1
	add A0,A1,D1 ; ldx (I3),A1	// ET1 + ET4 -> 'p'
// (buff,lcd0.backgroundColor,sizeof(buff));
	call _memset
	ldc 56,A0	// 56 -> A0
// jumped away
// 		for (x=0; x<3; x++)
	ldc 0,A1	// 0 -> 'x'
F4B11:	// (loop lvl 3)
	ldc 3,A0	// 3 -> ETf
	sub A1,A0,A0 ; ldx (I4)+3,NULL	// 'x' >= ETf -> AT35
	ldy (I6)+1,NULL	// I4 += 3
	jcs F4B9	// unsigned compare
	and NULL,NULL,A0	// 0 -> ETe
// jumped away
	ldc 7,LC	// loop 8 iterations
	add D1,A1,C0 ; ldx (I4)-3,NULL	// 'p' + 'x' -> AT3e
	ldy (I6)-1,NULL
// 		}
// {
// 			for (y=0; y<8; y++)
	loop LC,F4B13-1
	mv C0,I0 ; add A1,A1,C0	// AT3e -> ET11
//loop resumes
	ldx (I4)+2,NULL	// I4 += 2
	stx C0,(I4) ; sty B1,(I4)-1	// AT44 spills to #2
	sty B0,(I4) ; stx A1,(I4)	// AT42 spills to #1
// 			}
// {
// 				if (p[x]&(1 << (y+8)))
	ldc 8,A1	// 8 -> ET10
	ldy (I0),B0 ; add A0,A1,C0	// ET11 ==> ET12
	sub NULL,ONES,A1	// 1 -> ET14
	ashl A1,C0,B1	// ET14 << ET15 -> ET16
	and B0,B1,A1 ; ldy (I4)+1,B0	// ET12 and ET16 -> ET18
	ldy (I4),B1 ; ldx (I4)-1,C0	// unspill AT43 from #2
	sub A1,NULL,A1	// ET18 != (0) -> (0)
	nop
	jzc F4B33	// unsigned compare
	nop	// I4 += 1
// jumped away
	ldx (I4)-1,A1	// unspill AT41 from #1
F4B17:	// (loop lvl 4)
	ldx (I4)+2,NULL	// I4 += 2
	stx B1,(I4)-1	// AT4c spills to #2
	sty B0,(I4) ; stx A1,(I4) ; sub NULL,ONES,A1	// AT4b spills to #1
// 				if (p[x]&(1 << (y)))
	ldy (I0),B0 ; ashl A1,A0,B1	// ET11 ==> ET13
	and B0,B1,A1 ; ldy (I4)+1,B0	// ET13 and ET22 -> ET24
	ldx (I4)-1,B1 ; sub A1,NULL,A1	// unspill AT4c from #2
	nop
	jzc F4B35	// unsigned compare
	nop	// I4 += 1
// jumped away
	ldx (I4)-1,A1	// unspill AT4a from #1
F4B19:	// (loop lvl 4)
	sub A0,ONES,A0	// 'y' - (-1) -> 'y'
//	(0 nop's needed)
// loop end
F4B13:	// loop exit
	j F4B11
	sub A1,ONES,A1	// 'x' - (-1) -> 'x'
// jumped away
F4B35:	// (loop lvl 4)
	muluu A0,C1 ; ldx (I4)+3,A1	// I4 += 1
	stx D0,(I4) ; sty D1,(I4)-2	// D0 spills to #0
	stx B1,(I4) ; sty B0,(I4)-1	// AT50 spills to #2
	stx I0,(I4) ; sty A1,(I4)+3	// AT4e spills to #1
// buff[y*7+x*2+1] = lcd0.textColor;
	ldx (I1),A1 ; add NULL,P,D	// ET1a ==> 4 -> ET1b
	add D0,C0,B0 ; ldx (I4),D0	// ET1d + ET1f -> ET20
	sub B0,ONES,B1 ; ldy (I4)-3,D1	// ET20 - (-1) -> ET26
	add D0,B1,B0	// ETc + ET26 -> AT3d
	mv B0,I0	// AT3d -> ET27
	stx A1,(I0) ; ldy (I4),A1	// ET1b ==> ET27
	ldx (I4)+1,I0	// unspill AT4e from #1
	j F4B19
	ldy (I4),B0 ; ldx (I4)-2,B1	// unspill AT4f from #2
// jumped away
F4B33:	// (loop lvl 4)
	muluu A0,C1 ; ldx (I4)+3,A1	// I4 += 1
	stx D0,(I4) ; sty D1,(I4)-3	// D0 spills to #0
	stx B1,(I4)+1 ; add NULL,P,D	// AT48 spills to #1
	stx B0,(I4) ; sty I0,(I4)-1	// AT47 spills to #2
	sty A1,(I4)+3 ; ldx (I1),A1	// AT45 spills to #1
// buff[y*7+x*2] = lcd0.textColor;
	ldx (I4),D0 ; add D0,C0,B1	// ET1d + ET1f -> ET20
	ldy (I4)-3,D1 ; add D0,B1,B0	// unspill D1 from #0
	mv B0,I0	// AT3c -> ET21
	stx A1,(I0) ; ldy (I4)+1,A1	// ET1b ==> ET21
	ldy (I4),I0 ; ldx (I4)-1,B0	// unspill AT46 from #2
	j F4B17
	ldx (I4)-1,B1	// unspill AT48 from #1
// jumped away
F4B1:
	ldy (I6),LE ; ldx (I6)-1,LS
	ldy (I6),LC ; ldx (I6)-1,I3
	ldy (I6),I2 ; ldx (I6)-1,I1
	ldy (I6),I0 ; ldx (I6)-1,D1
	ldy (I6),D0 ; ldx (I6)-1,C1
	ldy (I6),C0 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,LcdInit	// 87 words
	.export _LcdInit
_LcdInit:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx I0,(I6) ; sty I1,(I6)+1
	stx I2,(I6) ; sty I3,(I6)
	ldx (I4)-2,NULL	// I4 += -2
	ldx (I4)+2,B0	// unspill 'display_mode' from #-2
// (display_mode == 0)
	sub B0,NULL,B0	// 'display_mode' != (0) -> (0)
	ldc 1,A0
	jzc F5B4	// unsigned compare
	ldc _devLcdHw,I0	// I0
// jumped away
	ldx (I6)+1,NULL ; and NULL,NULL,A0	// I6 += 1
// 	}
// {
// 		DevByteBusCreate (&devLcdHw, &hwInfo, 0);
	stx A0,(I6)+1	// ET0
	ldc _hwInfo9d9368,A0	// ET1
	call _DevByteBusCreate
	stx A0,(I6)	// ET1
// jumped away
	ldc _ILI9341_init,A0	// ET4
	ldc _lcd0,I0	// I0
	ldx (I6)-1,NULL	// I6 += 1
// 		TFTWriteVector(ILI9341_init);
	call _TFTWriteVector
	stx A0,(I6)	// ET4
// jumped away
	ldc 16,A0	// 16 -> A0
// 		memset(&lcd0,0,sizeof(lcd0));
	call _memset
	ldx (I6)-1,NULL ; and NULL,NULL,A1	// I6 += -1
// jumped away
// 	if (display_mode == 1)
	sub NULL,ONES,A0	// 1 -> 1 -> ET9
F5B4:
	sub B0,A0,A1	// 'display_mode' != ET9 -> AT38
	ldc 16,A0	// 16 -> A0
	jzc F5B9	// unsigned compare
	and NULL,NULL,A1	// 0 -> A1
// jumped away
// 	}
// {
// 		memset(&lcd0,0,sizeof(lcd0));
	call _memset
	ldc _lcd0,I0	// I0
// jumped away
F5B9:
// 	lcd0.width = 240;
	ldc _lcd0+5,I3	// ET1e
	ldc _LcdFilledRectangle,I0	// I0
	ldc 16,B0	// 16 -> 1 -> ET5
	ldc _lcd0,I2	// ET7
	ldc 240,A0	// 240 -> 1 -> ETb
	ldc _lcd0+1,I1	// ETd
	stx A0,(I2)+1 ; and NULL,NULL,A1	// ETb ==> ET7
// 	lcd0.height = 320;
	ldc 320,A0	// 320 -> 1 -> ETc
	stx A0,(I2)+7	// ETc ==> ET7
// 	lcd0.clipx1 = 0;
	ldc 239,A0	// 239 -> 1 -> ET10
	stx A1,(I2)+2	// ET0 ==> ET7
// 	lcd0.clipx2 = 240 - 1;
	stx A0,(I2)-1	// ET10 ==> ET7
// 	lcd0.clipy1 = 0;
	ldc 319,A0	// 319 -> 1 -> ET15
	stx A1,(I2)+2	// ET0 ==> ET7
// 	lcd0.clipy2 = 320 - 1;
	stx A0,(I2)-7	// ET15 ==> ET7
// 	lcd0.defaultTextColor = lcd0.textColor =((u_int16)((((180)>>3)<<11)|((((180)>>2)&0x3f)<<5)|(((180)>>3)&0x1f)));
	ldc 46518,A0	// 46518 -> 1 -> ET18
	stx A0,(I2)+2	// ET18 ==> ET7
	stx A0,(I2)-1	// ET18 ==> ET7
// 	lcd0.defaultBackgroundColor = lcd0.backgroundColor =((u_int16)((((0)>>3)<<11)|((((0)>>2)&0x3f)<<5)|(((128)>>3)&0x1f)));
	stx B0,(I2)+2	// ET5 ==> ET7
	stx B0,(I2)+6	// ET5 ==> ET7
// 	lcd0.highlightColor =((u_int16)((((255)>>3)<<11)|((((255)>>2)&0x3f)<<5)|(((255)>>3)&0x1f)));
	ldc 65535,B0	// 65535 -> 1 -> ET21
	stx B0,(I2)-1	// ET21 ==> ET7
// 	lcd0.shadowColor =((u_int16)((((80)>>3)<<11)|((((80)>>2)&0x3f)<<5)|(((80)>>3)&0x1f)));
	ldc 21130,B0	// 21130 -> 1 -> ET24
	stx B0,(I2)+3	// ET24 ==> ET7
// 	lcd0.buttonTextColor =((u_int16)((((0)>>3)<<11)|((((0)>>2)&0x3f)<<5)|(((0)>>3)&0x1f)));
	stx A1,(I2)-1	// ET0 ==> ET7
// 	lcd0.buttonFaceColor =((u_int16)((((180)>>3)<<11)|((((180)>>2)&0x3f)<<5)|(((180)>>3)&0x1f)));
	stx A0,(I2)	// ET18 ==> ET7
// 	SetHandler(LcdFilledRectangle, MyLcdFilledRectangle);
	call _SetHandler
	ldc _MyLcdFilledRectangle,A0	// A0
// jumped away
	ldc _LcdTextOutXY,I0	// I0
	ldc _MyLcdTextOutXY,A0	// A0
	ldx (I2)-7,NULL	// ET7 += -14
// 	SetHandler(LcdTextOutXY, MyLcdTextOutXY);
	call _SetHandler
	ldx (I2)-7,NULL	// ...
// jumped away
	ldy (I6)+1,NULL ; ldx (I3),A0	// I6 += 1
// 	LcdFilledRectangle(0,0,lcd0.width-1,lcd0.height-1,0,lcd0.backgroundColor);
	stx A0,(I6)+1 ; and NULL,NULL,A0	// ET31
	stx A0,(I6)+1	// ET6
	ldx (I1),A0	// ETd ==> 1 -> ET32
	add A0,ONES,A0	// ET32 + (-1) -> ET33
	stx A0,(I6)+1	// ET33
	ldx (I2),A0	// ET7 ==> ET34
	add A0,ONES,A0	// ET34 + (-1) -> ET35
	stx A0,(I6)+1	// ET35
	stx A1,(I6)+1	// ET0
	call _LcdFilledRectangle
	stx A1,(I6)	// ET0
// jumped away
	ldx (I6)-6,NULL	// I6 += -6
	ldy (I6),I3 ; ldx (I6)-1,I2
	ldy (I6),I1 ; ldx (I6)-1,I0
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect data_x,bss_x	// 89 words
	.export _devLcdHw
_devLcdHw:
	.bss 33
_buff8ffb18:
	.bss 56

//_____________________________________________________________
//
	.sect data_x,const_x	// 109 words
	.export _ILI9341_init
_ILI9341_init:
	.word 3, 246, 1, 1, 0, 3, 239, 3
	.word 128, 2, 3, 207, 0, 242, 160, 4
	.word 237, 100, 3, 18, 129, 5, 203, 57
	.word 44, 0, 52, 2, 2, 234, 0, 0
	.word 3, 232, 133, 16, 122, 1, 192, 33
	.word 1, 193, 17, 2, 197, 63, 60, 1
	.word 199, 198, 1, 58, 85, 1, 54, 8
	.word 2, 177, 0, 27, 2, 182, 10, 162
	.word 15, 224, 8, 32, 32, 8, 16, 8
	.word 64, 4, 48, 0, 0, 0, 0, 0
	.word 0, 15, 225, 8, 20, 24, 0, 12
	.word 5, 56, 72, 80, 0, 16, 8, 32
	.word 32, 8, 0, 44, 0, 17, 0, 41
	.word -1
_hwInfo9d9368:
	.word 64631, 65535, 6, 1

//_____________________________________________________________
//
	.sect data_y,const_y	// 13 words
InitTemplate_1:
	.word 4, 42, 0, 0, 0, 0, 4, 43
	.word 0, 0, 0, 0, -1

	.end
