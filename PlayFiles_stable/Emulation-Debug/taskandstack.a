
//_____________________________________________________________
//
	.sect code,CreateTaskAndStack	// 65 words
	.export _CreateTaskAndStack
_CreateTaskAndStack:
	ldc 14,A0	// 14 -> 1 -> ET0
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+2,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty I0,(I6)+1
	stx I3,(I6)+1 ; add C0,NULL,A1
	mv I2,I0 ; sub NULL,ONES,B0	// C0 -> 'stackSize'
// tas
	stx A0,(I6)+1	// ET0
	call _calloc
	stx B0,(I6)	// ET1
// jumped away
	ldx (I6)-2,NULL ; sub A0,NULL,C0	// I6 += -2
// (tas)
	nop
	jzs F0B13	// signed compare
	nop
// jumped away
	ldx (I6)+1,NULL	// I6 += 1
//   }
// {
//     tas->stack = AllocMemXY(stackSize, 1);
	stx B0,(I6)+1 ; add A1,NULL,B0	// ET1
	call _AllocMemXY
	stx A1,(I6)	// 'stackSize' -> ET3
// jumped away
	add A0,NULL,B1 ; ldy (I6)-2,NULL	// I6 += -2
	ldc 12,A0	// 12 -> 1 -> ET5
	add C0,A0,A0 ; ldy (I4)+1,NULL	// 'tas' + ET5 -> AT1c
	mv A0,I2	// AT1c -> ET6
	stx B1,(I2)	// ET4 ==> ET6
//     if (tas->stack)
	ldx (I2),A0	// ET6 ==> 12 -> ET7
	sub A0,NULL,A0	// ET7 != (0) -> (0)
	nop
	jzc F0B7	// signed compare
	nop
// jumped away
	ldy (I6)+1,NULL ; ldx (I4)-1,NULL
//     }
// else {
//       free(tas);
	call _free
	stx C0,(I6)	// 'tas'
// jumped away
	ldx (I6)-1,NULL ; and NULL,NULL,C0	// I6 += -1
//       tas = 0;
F0B13:
//   return tas;
	add C0,NULL,A0 ; ldx (I6)-1,I3	// 'tas' returns via A0
	ldy (I6),I0 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
	ldx (I4)+1,NULL	// I4 += 1
F0B7:
	stx I0,(I4)	// AT1e spills to #1
	mv C0,I0	// 'tas' -> 'task'
	mv I0,I3	// 'task' -> ET9
//     }
// task
// ->tc_Node.pri = priority;
	ldx (I3)+3,NULL	// ET9 += 3
	stx C1,(I3)-1	// 'priority' ==> ET9
//       task->tc_Node.name = name;
	stx I1,(I3)+6	// 'name' ==> ET9
//       task->tc_Stack = tas->stack;
	ldx (I2),A0	// ET6 ==> 12 -> ET7
	mv I0,I2	// 0 -> 1 -> ET10
	stx A0,(I3)+1 ; and NULL,NULL,A0	// ET7 ==> ET9
//       task->tc_StackSize = stackSize;
	stx A1,(I3)-3	// 'stackSize' ==> ET9
//       task->tc_SigWait = 0;
	stx A0,(I3)+1	// ET10 ==> ET9
//       task->tc_SigRecvd = 0;
	stx A0,(I3)	// ET10 ==> ET9
//       AddTask(task, func);
	ldx (I4)-1,I0	// unspill AT1e from #1
	call _AddTask
	mv I0,A0	// 'func' -> A0
// jumped away
//       Yield();
	call _Yield
	nop
// jumped away
//       tas->stackSize = stackSize;
	ldc 13,A0	// 13 -> 1 -> ET16
	add C0,A0,A0	// 'tas' + ET16 -> AT1d
	mv A0,I0	// AT1d -> ET17
	j F0B13
	stx B0,(I0)	// ET3 ==> ET17
// jumped away

//_____________________________________________________________
//
	.sect code,FreeTaskAndStack	// 36 words
	.export _FreeTaskAndStack
_FreeTaskAndStack:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A0,(I6) ; sty A1,(I6)+1
	mv I2,A0	// I2 -> 'tas'
	stx B0,(I6) ; sty I0,(I6)
//   if (tas)
	sub A0,NULL,A0	// 'tas' == (0) -> (0)
	ldc 12,A1	// 12 -> 1 -> ET0
	jzs F1B1	// signed compare
	nop
// jumped away
//   }
// {
//     if (tas->stack)
	add A0,A1,A1 ; ldy (I6)+1,NULL	// 'tas' + ET0 -> AT8
	mv A1,I0	// AT8 -> ET1
	ldx (I0),A1	// ET1 ==> 12 -> ET2
	sub A1,NULL,A1	// ET2 == (0) -> (0)
	nop
	jzs F1B6	// signed compare
	nop
// jumped away
	ldc 13,B0	// 13 -> 1 -> ET3
	add A0,B0,B0	// I6 += 1
	mv B0,I0	// AT9 -> ET4
//     }
// {
//       FreeMemXY(tas->stack, tas->stackSize);
	ldx (I0),B0	// ET4 ==> 13 -> ET5
	stx B0,(I6)+1	// ET5
	call _FreeMemXY
	stx A1,(I6)	// ET2
// jumped away
	ldx (I6)-1,NULL	// I6 += -2
F1B6:
//     free(tas);
	call _free
	stx A0,(I6)	// 'tas'
// jumped away
	ldx (I6)-1,NULL	// I6 += -1
F1B1:
	ldy (I6),I0 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

	.end
