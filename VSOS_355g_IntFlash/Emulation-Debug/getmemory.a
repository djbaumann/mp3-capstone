
//_____________________________________________________________
//
	.sect code,GetMemory	// 149 words
	.export _GetMemory
_GetMemory:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	stx B1,(I6) ; sty C0,(I6)+1
	stx C1,(I6) ; sty I0,(I6)
	ldx (I4)-3,NULL ; and NULL,NULL,B0	// I4 += -3
// res
// (address)
	ldx (I4)+1,C0	// 0 -> 'res'
	sub C0,NULL,C0 ; ldx (I4)+2,B1	// 'address' != (0) -> (0)
	nop	// I4 += -2
	jzc F0B3	// unsigned compare
	nop	// unspill 'page' from #-2
// jumped away
// 	}
// else {
// 		switch(page)
	sub B1,NULL,B1 ; ldx (I4)-4,NULL	// 'page' == (0) -> (0)
	ldx (I4)+4,A1 ; ldy (I6)+1,NULL	// unspill 'sizeWords' from #-4
	jzs F0B19	// unsigned compare
	nop
// jumped away
	sub NULL,ONES,A0 ; ldy (I6)-1,NULL
	sub B1,A0,A1
	nop
	jzc F0B28	// unsigned compare
	nop
// jumped away
	ldx (I4)-5,NULL ; ldy (I6)+1,NULL	// I4 += -5
// 				res = (u_int16)AllocMemX(sizeWords, align);
	ldx (I4)+1,C1	// unspill 'align' from #-5
	stx C1,(I6)+1	// 'align'
	ldx (I4)+4,A1	// unspill 'sizeWords' from #-4
	call _AllocMemX
	stx A1,(I6)	// 'sizeWords'
// jumped away
	ldx (I6)-2,NULL ; add A0,NULL,B0	// I6 += -2
// 				break;
F0B5:
// 	if (!res)
	sub B0,NULL,B0	// 'res' == (0) -> (0)
	ldc 1000,A0
	jzs F0B34	// unsigned compare
	nop
// jumped away
// 	return res;
	add B0,NULL,A0 ; ldy (I6),I0	// 'res' returns via A0
	ldx (I6)-1,C1
	ldy (I6),C0 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
	ldc 1000,A0	// 1000 -> 1 -> ET1a
F0B34:
	ldx (I6)+1,NULL	// I6 += 1
// 	}
// {
// 		Delay(1000);
	call _Delay
	stx A0,(I6)	// ET1a
// jumped away
	ldc outofmem_3,A0	// ET1b
	stx C1,(I6)+1	// I6 += 1
// 		SysError("Out of mem %d (@%d,%dw,%d).\n",page, address, sizeWords, align);
	stx A1,(I6)+1	// 'sizeWords'
	stx C0,(I6)+1	// 'address'
	stx B1,(I6)+1	// 'page'
	call _SysError
	stx A0,(I6)	// ET1b
// jumped away
	ldx (I6)-5,NULL	// I6 += -5
// 		while(1)
F0B41:
	ldc 1000,A0	// 1000 -> 1 -> ET1a
	ldx (I6)+1,NULL	// I6 += 1
// 		}
// {
// 			Delay(1000);
	call _Delay
	stx A0,(I6)	// ET1a
// jumped away
	j F0B41
	ldx (I6)-1,NULL	// I6 += -1
// jumped away
F0B28:
	ldc 2,A0	// 2 -> 1 -> ET4
	sub B1,A0,A1	// 'page' != ET4 -> AT29
	nop
	jzc F0B31	// unsigned compare
	nop
// jumped away
	ldx (I4)-5,NULL ; ldy (I6)+1,NULL	// I4 += -5
// 				res = (u_int16)AllocMemY(sizeWords, align);
	ldx (I4)+1,C1	// unspill 'align' from #-5
	stx C1,(I6)+1	// 'align'
	ldx (I4)+4,A1	// unspill 'sizeWords' from #-4
	call _AllocMemY
	stx A1,(I6)	// 'sizeWords'
// jumped away
// 				break;
	j F0B5
	ldx (I6)-2,NULL ; add A0,NULL,B0	// I6 += -2
// jumped away
F0B31:
	ldc ld_1,A0	// ET9
	ldx (I6)+1,NULL	// I6 += 1
// 				SysError("ld");
	call _SysError
	stx A0,(I6)	// ET9
// jumped away
	ldy (I4)-4,NULL ; ldx (I6)-1,NULL	// I6 += -1
// 				break;
	ldx (I4)-1,A1	// unspill 'sizeWords' from #-4
	j F0B5
	ldx (I4)+5,C1	// unspill 'align' from #-5
// jumped away
F0B19:
// 				res = (u_int16)__AllocMemI(sizeWords);
	call ___AllocMemI
	stx A1,(I6)	// 'sizeWords'
// jumped away
	ldc _highestISoFar,I0	// ETe
	add A0,NULL,B0 ; ldx (I6)-1,NULL	// I6 += -1
// 				if ((res+sizeWords) > highestISoFar)
	ldx (I0),A0/*V*/ ; add A0,A1,C1	// 'res' + 'sizeWords' -> ETd
	sub A0,C1,A0	// 'highestISoFar' <= ETd -> AT27
	ldc 28672,A0	// 28672 -> 1 -> ETf
	jcs F0B51	// unsigned compare
	nop
// jumped away
// 				}
// {
// 					highestISoFar = res+sizeWords;
	stx C1,(I0)/*V*/ ; sub A0,C1,A0	// ETd ==> ETe
// 					if (highestISoFar > 0x7000)
	ldc 32704,A0	// 32704 -> 1 -> ET10
	jcs F0B51	// unsigned compare
	nop
// jumped away
	ldc _vo_stderr,I0	// ET13
	ldx (I6)+1,NULL ; sub A0,C1,A0	// I6 += 1
// 					}
// {
//  vo_fprintf(vo_stderr,"IMEM: only %dw free!\n",0x7fc0-highestISoFar);
	stx A0,(I6)+1	// ET11
	ldc imemonly_2,A0	// ET12
	stx A0,(I6)+1	// ET12
	ldx (I0),A0/*V*/	// ET13 ==> 'vo_stderr'
	call _vo_fprintf
	stx A0,(I6)	// 'vo_stderr'
// jumped away
	ldx (I6)-3,NULL	// I6 += -3
F0B51:
	ldx (I4)-5,NULL	// I4 += -5
	j F0B5
	ldx (I4)+5,C1	// unspill 'align' from #-5
// jumped away
F0B3:
// 	}
// {
// 		switch(page)
	sub NULL,ONES,A0	// 1 -> 1 -> ET1
	sub B1,A0,A1	// 'page' != ET1 -> AT20
	nop
	jzc F0B8	// unsigned compare
	nop
// jumped away
	ldx (I4)-4,NULL ; ldy (I6)+1,NULL	// I4 += -4
// 				res = (u_int16)AllocMemAbsX(address, sizeWords);
	ldx (I4)+4,A1	// unspill 'sizeWords' from #-4
	stx A1,(I6)+1	// 'sizeWords'
	call _AllocMemAbsX
	stx C0,(I6)	// 'address'
// jumped away
	ldx (I6)-2,NULL ; add A0,NULL,B0	// I6 += -2
// 				break;
F0B44:
	ldx (I4)-5,NULL	// I4 += -5
	j F0B5
	ldx (I4)+5,C1	// unspill 'align' from #-5
// jumped away
F0B8:
	ldc 2,A0	// 2 -> 1 -> ET4
	sub B1,A0,A1	// 'page' != ET4 -> AT23
	nop
	jzc F0B11	// unsigned compare
	nop
// jumped away
	ldx (I4)-4,NULL ; ldy (I6)+1,NULL	// I4 += -4
// 				res = (u_int16)AllocMemAbsY(address, sizeWords);
	ldx (I4)+4,A1	// unspill 'sizeWords' from #-4
	stx A1,(I6)+1	// 'sizeWords'
	call _AllocMemAbsY
	stx C0,(I6)	// 'address'
// jumped away
// 				break;
	j F0B44
	ldx (I6)-2,NULL ; add A0,NULL,B0	// I6 += -2
// jumped away
F0B11:
// 				if ((address >= 256) && (address < 0x8000u))
	ldc 256,A0	// 256 -> 1 -> ET7
	sub C0,A0,A1	// 'address' < ET7 -> AT24
	ldc 32768,A0	// 32768 -> 1 -> ET8
	jcc F0B14	// unsigned compare
	sub C0,A0,A1	// 'address' < ET8 -> AT25
// jumped away
	ldc ld_1,A0	// ET9
	jcc F0B13	// unsigned compare
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
	ldx (I6)-1,NULL
F0B14:
	mv C0,B0	// 'address' -> 'res'
// 				}
// else {
// 					res = address;
F0B48:
	ldx (I4)-4,NULL	// I4 += -4
	j F0B44
	ldx (I4)+4,A1	// unspill 'sizeWords' from #-4
// jumped away
F0B13:
// 				}
// {
// 					SysError("ld");
	call _SysError
	stx A0,(I6)	// ET9
// jumped away
	j F0B48
	ldx (I6)-1,NULL	// I6 += -1
// jumped away

//_____________________________________________________________
//
	.sect data_x,getmemoryinit_x	// 1 word
	.export _highestISoFar
_highestISoFar:
	.word 0

//_____________________________________________________________
//
	.sect data_x,getmemoryconst_x	// 54 words
ld_1:
	.word "ld"

	.zero 1
imemonly_2:
	.word "IMEM: only %dw free!\n"

	.zero 1
outofmem_3:
	.word "Out of mem %d (@%d,%dw,%d).\n"

	.zero 1

	.end
