
//_____________________________________________________________
//
	.sect code,SetStdAudioOutVolume	// 14 words
	.export _SetStdAudioOutVolume
_SetStdAudioOutVolume:
	ldx (I6)+1,NULL	// I6 += 1
	stx A0,(I6) ; sty A1,(I6)+1
	stx I0,(I6)
// volume
	ldc _masterVolume,I0	// ET0
	ldx (I0),A0/*V*/	// ET0 ==> 'volume'
// (volume < 0)
// volume = 0;
// 	leftVolume = volume+balance;
	ldc _balance,I0	// ET2
	ldx (I0),A1/*V*/ ; sub NULL,ONES,A0	// ET2 ==> 'balance'
// 	if (leftVolume<volume)
// 	rightVolume = volume-balance;
	ldx (I0),A1/*V*/	// ET2 ==> 'balance'
// 	if (rightVolume<volume)
// 	volumeChanged = 1;
	ldc _volumeChanged,I0	// ET6
	stx A0,(I0)/*V*/	// ET5 ==> ET6
	ldx (I6)-1,I0
	ldy (I6),A1 ; ldx (I6)-1,A0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,SystemUiMessageCyclic	// 70 words
	.export _SystemUiMessageCyclic
_SystemUiMessageCyclic:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+7,I4
	ldx (I6)+5,NULL	// ...
	stx A0,(I6) ; sty A1,(I6)+1
	stx B0,(I6) ; sty B1,(I6)+1
	stx C0,(I6) ; and NULL,NULL,B1	// 0 -> 'i'
	sty C1,(I6)+1
	stx I0,(I6) ; sty I1,(I6)+1
	ldc _filterValues,I0	// 'fVal'
	stx I3,(I6) ; sty LC,(I6)+1
	ldc _stdaudioout,I3	// ET9
	ldc 15,LC	// loop 16 iterations
	stx LS,(I6) ; sty LE,(I6)
// fVal
// (i=0; i<16; i++)
	loop LC,F1B4-1
	ldc -32768,C1	// -32768 -> 0 -> ET5
//loop resumes
// 	}
// {
// 		if (*fVal != -32768)
	ldy (I0),A0	// 'fVal' ==> ET3
	sub A0,C1,A0	// ET3 == ET5 -> AT1e
	nop
	jzs F1B8	// signed compare
	nop
// jumped away
	ldx (I4)+1,NULL ; ldy (I6)+1,NULL	// I4 += 1
	mv I4,I1	// I4 -> [] -> I1
// 		}
// .filterNumber = i;
	stx B1,(I4)-1
// 			if (ioctl(stdaudioout,233, &ftEqu) == 0)
	ldx (I3),I2/*V*/	// ET9 ==> 'stdaudioout'
	call _ioctl
	ldc 233,C0	// 233 -> C0
// jumped away
	sub A0,NULL,A0	// ETa != (0) -> (0)
	nop
	jzc F1B10	// signed compare
	nop
// jumped away
// 			}
// {
// 				ftEqu.gainDB = *fVal;
	call short_to_df
	ldy (I0),A0	// 'fVal' ==> ET3
// jumped away
	ldc 234,C0	// 234 -> C0
	ldx (I4)+6,NULL ; ldy (I6)+1,NULL	// I4 += 6
	stx A0,(I4)+1
	stx A1,(I4)+1
	stx B0,(I4)-7
	mv I4,I1	// I4 -> [] -> I1
// 				ioctl(stdaudioout,234, &ftEqu);
	call _ioctl
	ldx (I3),I2/*V*/ ; ldy (I4)-1,NULL	// ET9 ==> 'stdaudioout'
// jumped away
F1B10:	// (loop lvl 2)
// 			*fVal = -32768;
	sty C1,(I0)	// ET5 ==> 'fVal'
F1B8:	// (loop lvl 2)
// 		fVal++;
	sub B1,ONES,B1 ; ldx (I0)+1,NULL	// 'i' - (-1) -> 'i'
//	(0 nop's needed)
// loop end
F1B4:	// loop exit
// 	if (volumeChanged)
	ldc _volumeChanged,I3	// ET16
	ldx (I3),A0/*V*/	// ET16 ==> 'volumeChanged'
	sub A0,NULL,A0	// 'volumeChanged' == (0) -> (0)
	ldc 228,C0	// 228 -> C0
	jzs F1B1	// unsigned compare
	ldc _masterVolume,I0	// ET18
// jumped away
// 	}
// {
// 		volumeChanged = 0;
	and NULL,NULL,A0 ; ldy (I6)+1,NULL	// 0 -> 1 -> ET1
	stx A0,(I3)/*V*/	// ET1 ==> ET16
// 		ioctl(stdaudioout,228, (void*)(256+masterVolume));
	ldc 256,A0	// 256 -> 0 -> ET17
	ldx (I0),A1/*V*/	// ET18 ==> 'masterVolume'
	ldc _stdaudioout,I0	// ET9
	add A0,A1,A0 ; ldx (I0),I2/*V*/	// ET17 + 'masterVolume' -> ET19
	mv A0,I0	// ET19 -> ET1a
	call _ioctl
	mv I0,I1	// ET1a -> I1
// jumped away
F1B1:
	ldy (I6),LE ; ldx (I6)-1,LS
	ldy (I6),LC ; ldx (I6)-1,I3
	ldy (I6),I1 ; ldx (I6)-1,I0
	ldy (I6),C1 ; ldx (I6)-1,C0
	ldy (I6),B1 ; ldx (I6)-1,B0
	ldy (I6),A1 ; ldx (I6)-1,A0
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away

//_____________________________________________________________
//
	.sect code,SystemUiMessageReceiver	// 77 words
	.export _SystemUiMessageReceiver
_SystemUiMessageReceiver:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty B0,(I6)+1
	ldc 518,A1	// 518 -> 1 -> ET0
	stx B1,(I6) ; sty I0,(I6)
	ldx (I4)-3,NULL	// I4 += -3
// 	if (message == 0x0206)
	ldx (I4)-2,A0	// unspill 'message' from #-3
	sub A0,A1,A1	// 'message' != ET0 -> AT16
	ldc 273,A1
	jzc F2B4	// unsigned compare
	ldc _masterVolume,I0	// ET2
// jumped away
// 	}
// {
// 		masterVolume = (s_int16)value;
	ldx (I4)+5,A0	// unspill A0 from #0
// 		SetStdAudioOutVolume();
	call _SetStdAudioOutVolume
	stx A0,(I0)/*V*/	// ET1 ==> ET2
// jumped away
// 		return 0;
	and NULL,NULL,A0	// 0 -> 0 -> ET3
F2B1:
	ldy (I6),I0 ; ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
// 	if (message == 0x0111)
	ldc 273,A1	// 273 -> 1 -> ET4
	ldx (I4)-5,NULL
F2B4:
	ldx (I4)+5,NULL ; sub A0,A1,A1
	ldc 274,A1	// 274 -> 1 -> ET8
	jzc F2B7	// unsigned compare
	ldc _masterVolume,I0	// ET2
// jumped away
// 	}
// {
// 		if (masterVolume)
	ldx (I0),A0/*V*/	// ET2 ==> 'masterVolume'
	sub A0,NULL,A0	// 'masterVolume' == (0) -> (0)
	nop
	callzs _SetStdAudioOutVolume
	ldc F2B9,LR0
// jumped away
// masterVolume--;
	add A0,ONES,A0	// 'masterVolume' + (-1) -> ET7
// 		SetStdAudioOutVolume();
	call _SetStdAudioOutVolume
	stx A0,(I0)/*V*/	// ET7 ==> ET2
// jumped away
F2B9:
// 		return masterVolume;
	ldc _masterVolume,I0	// ET2
	j F2B1
	ldx (I0),A0/*V*/	// ET2 ==> 'masterVolume'
// jumped away
F2B7:
// 	if (message == 0x0112)
	sub A0,A1,A1	// 'message' != ET8 -> AT1a
	ldc 519,A1	// 519 -> 1 -> ETc
	jzc F2B12	// unsigned compare
	nop	// ET2
// jumped away
// 	}
// {
// 		if (masterVolume<90)
	ldc 90,A1	// 90 -> 0 -> ET9
	ldx (I0),A0/*V*/	// ET2 ==> 'masterVolume'
	sub A0,A1,A1	// 'masterVolume' >= ET9 -> AT1c
	nop
	callge _SetStdAudioOutVolume
	ldc F2B14,LR0
// jumped away
// masterVolume++;
	sub A0,ONES,A0	// 'masterVolume' - (-1) -> ETb
// 		SetStdAudioOutVolume();
	call _SetStdAudioOutVolume
	stx A0,(I0)/*V*/	// ETb ==> ET2
// jumped away
F2B14:
// 		return masterVolume;
	ldc _masterVolume,I0	// ET2
	j F2B1
	ldx (I0),A0/*V*/	// ET2 ==> 'masterVolume'
// jumped away
F2B12:
// 	if (message == 0x0207)
	sub A0,A1,A1 ; ldx (I4)-5,NULL	// 'message' != ETc -> AT1d
	ldc 65520,A1	// 65520 -> 1 -> ETe
	jzc F2B17	// unsigned compare
	ldc _balance,I0	// ETd
// jumped away
// 	}
// {
// 		balance = (s_int16)value;
	ldx (I4)+5,A0	// unspill A0 from #0
// 		SetStdAudioOutVolume();
	call _SetStdAudioOutVolume
	stx A0,(I0)/*V*/	// ET1 ==> ETd
// jumped away
// 		return 0;
	j F2B1
	and NULL,NULL,A0	// 0 -> 0 -> ET3
// jumped away
F2B17:
	and A0,A1,B0 ; ldx (I4)+5,NULL
// 	if ((message & 0xfff0) == 0x0210)
	ldc 528,A1	// 528 -> 1 -> ET10
	sub B0,A1,A1	// ETf != ET10 -> AT1f
	ldc 15,A1	// 15 -> 1 -> ET12
	jzc F2B20	// unsigned compare
	nop
// jumped away
	ldx (I4)-5,NULL ; and A0,A1,A1	// I4 += -5
// 	}
// {
// 		filterValues[message & 0xf] = value;
	ldc _filterValues,A0	// ET11
	ldx (I4)+5,B0 ; add A0,A1,A0	// unspill B0 from #0
	mv A0,I0	// AT22 -> ET14
	sty B0,(I0)	// ET1 ==> ET14
F2B20:
// 	return -3;
	j F2B1
	ldc -3,A0	// -3 -> 0 -> ET15
// jumped away

//_____________________________________________________________
//
	.sect data_x,sysuimsginit_x	// 13 words
	.export _systemUiMessageCyclicNode
_systemUiMessageCyclicNode:
	.word 0
	.zero 1
	.zero 1
	.zero 1
	.word _SystemUiMessageCyclic
	.zero 2
	.zero 2
	.zero 1
_balance:
	.word 0
_masterVolume:
	.word 0
_volumeChanged:
	.word 1

//_____________________________________________________________
//
	.sect data_y,sysuimsginit_y	// 18 words
	.export _filterValues
_filterValues:
	.word -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768
	.word -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768

	.end
