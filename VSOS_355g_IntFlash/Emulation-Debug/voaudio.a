
//_____________________________________________________________
//
	.sect code,AudioIoctl	// 80 words
	.export _AudioIoctl
_AudioIoctl:
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4
	stx A1,(I6) ; sty C0,(I6)+1
	ldc 5,A1	// 5 -> 0 -> ET0
	stx C1,(I6) ; sty I2,(I6)
	ldx (I4)-2,NULL	// I4 += -2
// 	switch(request)
	ldx (I4)+2,A0	// unspill 'request' from #-2
	sub A0,A1,A1	// 'request' == ET0 -> AT17
	ldc 205,A1	// 205 -> 0 -> ET5
	jzs F0B4	// signed compare
	sub A0,A1,A1	// 'request' == ET5 -> AT19
// jumped away
	nop
	jzs F0B7	// signed compare
	ldx (I4)-3,NULL
// jumped away
	ldc 201,A1	// 201 -> 0 -> ETb
	sub A0,A1,A1 ; ldx (I4)+3,NULL
	ldc 228,A1	// 228 -> 0 -> ETe
	jzs F0B12	// signed compare
	sub A0,A1,A0	// 'request' != ETe -> AT1c
// jumped away
	nop
	jzc F0B20	// signed compare
	or NULL,ONES,A0
// jumped away
	ldc 256,A0	// 256 -> 1 -> ETf
	ldx (I4)-3,NULL	// I4 += -3
// 		}
// {
// 			volumeReg = (u_int16)arg - 256;
	ldx (I4)+3,I0	// unspill 'arg' from #0
	mv I0,A1	// 'arg' -> ETc
	ldc _volumeReg,I0	// ET11
	sub A1,A0,A1	// ETc - ETf -> ET10
	stx A1,(I0)/*V*/ ; sub A1,A0,A0	// ET10 ==> ET11
// 			if (volumeReg >= 0x100)
	nop
	jcc F0B17	// unsigned compare
	and NULL,NULL,A0	// 0 -> 1 -> ET12
// jumped away
// 			}
// {
// 				volumeReg = 0;
F0B18:
// 			SetVolume();
	call _SetVolume
	stx A0,(I0)/*V*/ ; ldy (I6)+1,NULL	// ET12 ==> ET11
// jumped away
// 		}
// {
// 			return -1;
	or NULL,ONES,A0	// -1 -> 0 -> ET15
F0B20:
	ldy (I6),I2 ; ldx (I6)-1,C1
	ldy (I6),C0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F0B17:
// 			}
// else {
// 				volumeReg *= 0x0101;
	ldc 257,A1	// 257 -> 1 -> ET13
	ldc _volumeReg,I0	// ET11
	ldx (I0),A0/*V*/	// ET11 ==> 'volumeReg'
	muluu A0,A1	// 'volumeReg' * ET13 -> P
	j F0B18
	add NULL,P,A	// P -> AT1f
// jumped away
F0B12:
	ldc _voAudioChannels,I2	// ETd
	ldx (I4)-3,NULL	// I4 += -3
// 		}
// {
// 			voAudioChannels = arg;
	ldx (I4)+3,I0	// unspill 'arg' from #0
	mv I0,A0	// 'arg' -> ETc
// 			break;
	j F0B3
	stx A0,(I2)/*V*/	// ETc ==> ETd
// jumped away
F0B4:
// 		}
// {
// (*(__y volatile u_int16 *)(u_int16)(0xFC02)) &= ~(1<< 0);
	ldc 65534,A0	// 65534 -> 1 -> ET1
	ldc 64514,I0	// 64514 -> ET2
	ldy (I0),A1/*V*/ ; ldx (I4)-3,NULL	// ET2 ==> ET3
	and A1,A0,A0	// ET3 and ET1 -> ET4
// 			InitAudio();
	call _InitAudio
	sty A0,(I0)/*V*/	// ET4 ==> ET2
// jumped away
F0B7:
// 		}
// rate
	ldx (I4)+3,I0	// unspill 'arg' from #0
	ldx (I0)+1,C0
	ldx (I0)-1,C1
	mv C1,C1	// update guard bits (cmp)
// (!rate)
	sub C,NULL,C	// 'rate' != (0) -> (0)
	nop
	jzc F0B10	// signed compare
	nop
// jumped away
// rate=48000;
	ldc -17536,C0	// -17536 -> C0
	and NULL,NULL,C1	// 0 -> C1
F0B10:
// 				SetRate(rate);
	call _SetRate
	ldx (I6)+1,NULL	// I6 += 1
// jumped away
// (*(__y volatile u_int16 *)(u_int16)(0xFC02)) |=(1<< 0);
	ldc 64514,I0	// 64514 -> ET2
	ldy (I0),A1/*V*/ ; sub NULL,ONES,A0	// ET2 ==> ET9
	or A1,A0,A0	// ET9 or ET8 -> ETa
	sty A0,(I0)/*V*/	// ETa ==> ET2
// 			break;
F0B3:
// 	return 0;
	j F0B20
	and NULL,NULL,A0	// 0 -> 0 -> ET16
// jumped away

//_____________________________________________________________
//
	.sect code,AudioWrite	// 45 words
	.export _AudioWrite
_AudioWrite:
	ldc _voAudioChannels,I0	// ET1
	ldx (I6)+1,NULL	// I6 += 1
	stx LR0,(I6)+1
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+3,I4
	stx A1,(I6) ; sty B0,(I6)+1
	ldc 2,A1	// 2 -> 1 -> ET0
	stx B1,(I6) ; ldy (I4)-2,NULL
// buf
// (voAudioChannels == 2)
	ldx (I0),A0/*V*/	// ET1 ==> 'voAudioChannels'
	ldx (I4)+2,I0 ; sub A0,A1,A0	// unspill 'bufV' from #0
	ldc -2,A1	// -2 -> AT3
	jzc F1B4	// unsigned compare
	nop
// jumped away
	ldx (I4)-4,NULL ; ldy (I6)+1,NULL	// I4 += -4
// 	}
// {
// 		AudioOutputSamples(buf, bytes/4);
	ldx (I4)+4,A0	// unspill 'bytes' from #0
	ashl A0,A1,A0	// 'bytes' << AT3 -> ET4
	stx A0,(I6)+1	// ET4
	call _AudioOutputSamples
	stx I0,(I6)+1	// 'bufV'
// jumped away
	ldx (I6)-2,NULL	// I6 += -2
F1B1:
	ldx (I6)-1,B1
	ldy (I6),B0 ; ldx (I6)-1,A1
	ldx (I4),I6 ; ldy (I4),I4
	ldx (I6)-1,NULL	// I6 += -1
	ldx (I6)-1,LR0
	jr
	nop
// jumped away
F1B4:
	ldx (I4)-4,NULL ; sub NULL,ONES,B0	// I4 += -4
// 	}
// samples
	ldx (I4)+5,A0 ; or NULL,ONES,A1	// -1 -> AT6
	ashl A0,A1,A0 ; mv I4,A1	// 'bytes' << AT6 -> ET7
// (--samples)
	j F1B10
	sub A0,ONES,A0 ; ldx (I4)-1,NULL	// ET7 - (-1) -> 'samples'
// jumped away
F1B7:	// (loop lvl 2)
// 		}
// {
// 			d[0] = d[1] = *buf++;
	ldx (I0)+1,B1	// 'bufV' ==> ETf
	stx B1,(I4)-1
	stx B1,(I4)-1
// 			AudioOutputSamples(d, 1);
	stx B0,(I6)+1	// ETd
	call _AudioOutputSamples
	stx A1,(I6)+1	// ET11
// jumped away
	ldx (I6)-2,NULL	// I6 += -2
F1B10:	// (loop lvl 2)
	add A0,ONES,A0 ; ldx (I4)+2,NULL	// 'samples' + (-1) -> 'samples'
	nop	// I4 += 2
	jzc F1B7	// compare against zero
	ldy (I6)+1,NULL
// jumped away
	j F1B1
	ldx (I4)-2,NULL ; ldy (I6)-1,NULL
// jumped away

//_____________________________________________________________
//
	.sect data_x,voaudioconst_x	// 12 words
	.export _audioout
_audioout:
	.word 2115, 0, _AudioFileOperations
	.zero 2
	.zero 1
	.zero 1
	.export _AudioFileOperations
_AudioFileOperations:
	.word _CommonOkResultFunction, _CommonOkResultFunction, _AudioIoctl, _AudioWrite, _AudioWrite

//_____________________________________________________________
//
	.sect data_x,voaudioinit_x	// 1 word
	.export _voAudioChannels
_voAudioChannels:
	.word 2

	.end
